
Sistem Penggerak - Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000004c2  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080010e  0080010e  00000564  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b4  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b79  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083b  00000000  00000000  00002941  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  0000317c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090d  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a3  00000000  00000000  00003e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_20>
  54:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_21>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	b9 01       	movw	r22, r18

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e2 ec       	ldi	r30, 0xC2	; 194
  7e:	f4 e0       	ldi	r31, 0x04	; 4
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ae 30       	cpi	r26, 0x0E	; 14
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ae e0       	ldi	r26, 0x0E	; 14
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 32       	cpi	r26, 0x2A	; 42
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 89 01 	call	0x312	; 0x312 <main>
  b6:	0c 94 5f 02 	jmp	0x4be	; 0x4be <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z11timer1_initv>:

void JoystickButton::data_reset(void)
{
	this->_x_data = 128;
	this->_y_data = 128;
	this->_button_state = 0x00;
  be:	8f e9       	ldi	r24, 0x9F	; 159
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  d0:	e1 e8       	ldi	r30, 0x81	; 129
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	80 83       	st	Z, r24
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <_Z8ADC_Initv>:
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  f4:	8f ea       	ldi	r24, 0xAF	; 175
  f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 100:	87 b1       	in	r24, 0x07	; 7
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	87 b9       	out	0x07, r24	; 7
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 10c:	08 95       	ret

0000010e <_Z14ADC_change_muxh>:
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	90 7f       	andi	r25, 0xF0	; 240
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	89 2b       	or	r24, r25
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <_ZN14JoystickButtonC1Ev>:
 11e:	fc 01       	movw	r30, r24
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
 124:	81 83       	std	Z+1, r24	; 0x01
 126:	12 82       	std	Z+2, r1	; 0x02
 128:	13 82       	std	Z+3, r1	; 0x03
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14ADC_change_muxh>
 130:	08 95       	ret

00000132 <_ZN14JoystickButton4initEv>:
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	83 70       	andi	r24, 0x03	; 3
 136:	8a b9       	out	0x0a, r24	; 10
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	83 70       	andi	r24, 0x03	; 3
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11timer1_initv>
 142:	0e 94 77 00 	call	0xee	; 0xee <_Z8ADC_Initv>
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <_ZN14JoystickButton13read_joystickEv>:
}

void JoystickButton::read_joystick(void)
{
 152:	fc 01       	movw	r30, r24
	switch (this->_pot_state)
 154:	83 81       	ldd	r24, Z+3	; 0x03
 156:	88 23       	and	r24, r24
 158:	19 f0       	breq	.+6      	; 0x160 <_ZN14JoystickButton13read_joystickEv+0xe>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	69 f0       	breq	.+26     	; 0x178 <_ZN14JoystickButton13read_joystickEv+0x26>
 15e:	08 95       	ret
	{
	case X_POT:
		// Read Converted analog data in A/D Register
		dummy = (char)ADCL;
 160:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 164:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		this->_x_data = (unsigned char)ADCH;
 168:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 16c:	80 83       	st	Z, r24
		// Change mux for next conversion
		this->_pot_state = Y_POT;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	83 83       	std	Z+3, r24	; 0x03
		ADC_change_mux(JOY_Y);
 172:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14ADC_change_muxh>
		break;
 176:	08 95       	ret
	case Y_POT:
		// Read Converted analog data in A/D Register
		dummy = (char)ADCL;
 178:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 17c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		this->_y_data = (unsigned char)ADCH;
 180:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 184:	81 83       	std	Z+1, r24	; 0x01
		// Change mux for next conversion
		this->_pot_state = X_POT;
 186:	13 82       	std	Z+3, r1	; 0x03
		ADC_change_mux(JOY_X);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14ADC_change_muxh>
 18e:	08 95       	ret

00000190 <_ZN14JoystickButton11read_buttonEv>:
	}
}

void JoystickButton::read_button(void)
{
	this->_button_state = BUTTON_PIN;
 190:	29 b1       	in	r18, 0x09	; 9
	this->_button_state = (~(this->_button_state)) & BUTTON_DDRCONFIG;
 192:	20 95       	com	r18
 194:	2c 7f       	andi	r18, 0xFC	; 252
 196:	fc 01       	movw	r30, r24
 198:	22 83       	std	Z+2, r18	; 0x02
 19a:	08 95       	ret

0000019c <_ZN14JoystickButton13return_x_dataEv>:
}

unsigned char JoystickButton::return_x_data(void)
{
	return this->_x_data;
}
 19c:	fc 01       	movw	r30, r24
 19e:	80 81       	ld	r24, Z
 1a0:	08 95       	ret

000001a2 <_ZN14JoystickButton13return_y_dataEv>:

unsigned char JoystickButton::return_y_data(void)
{
	return this->_y_data;
}
 1a2:	fc 01       	movw	r30, r24
 1a4:	81 81       	ldd	r24, Z+1	; 0x01
 1a6:	08 95       	ret

000001a8 <_ZN14JoystickButton18return_button_dataEv>:

unsigned char JoystickButton::return_button_data(void)
{
	return this->_button_state;
 1a8:	fc 01       	movw	r30, r24
 1aa:	82 81       	ldd	r24, Z+2	; 0x02
 1ac:	08 95       	ret

000001ae <_Z41__static_initialization_and_destruction_0ii>:
				myJSButton.return_button_data()
			);
		}
    }
	return 0;
}
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	39 f4       	brne	.+14     	; 0x1c0 <_Z41__static_initialization_and_destruction_0ii+0x12>
 1b2:	6f 3f       	cpi	r22, 0xFF	; 255
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <_Z41__static_initialization_and_destruction_0ii+0x12>
unsigned long time_ms;
unsigned char counter;

// Inisiasi Data
RFData myRFData;
JoystickButton myJSButton;
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN14JoystickButtonC1Ev>
 1c0:	08 95       	ret

000001c2 <_Z5setupv>:

/** SETUP **/
void setup(void)
{
	counter = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <counter>
	DDRB = 0x01;
 1c8:	84 b9       	out	0x04, r24	; 4
	// Initiating UART for RF Transmission
	//myRFData.AT_Setting();
	myRFData.init();
 1ca:	83 e1       	ldi	r24, 0x13	; 19
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN6RFData4initEv>
	
	// Initiating ADC and Timer1 for Joystick Data Routine
	myJSButton.init();
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 99 00 	call	0x132	; 0x132 <_ZN14JoystickButton4initEv>
	
	sei();
 1da:	78 94       	sei
	UART_TxChar(10);
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z11UART_TxCharc>
 1e2:	08 95       	ret

000001e4 <__vector_20>:
	
}

/** INTERRUPTS  **/
ISR(USART_TX_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	myRFData.ISR_transmitting();
 206:	83 e1       	ldi	r24, 0x13	; 19
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 32 02 	call	0x464	; 0x464 <_ZN6RFData16ISR_transmittingEv>
}
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_18>:
ISR(USART_RX_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
	
}
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_13>:
ISR(TIMER1_OVF_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	time_ms += 2;
 266:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <time_ms>
 26a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <time_ms+0x1>
 26e:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <time_ms+0x2>
 272:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <time_ms+0x3>
 276:	02 96       	adiw	r24, 0x02	; 2
 278:	a1 1d       	adc	r26, r1
 27a:	b1 1d       	adc	r27, r1
 27c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <time_ms>
 280:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <time_ms+0x1>
 284:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <time_ms+0x2>
 288:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <time_ms+0x3>
	myJSButton.read_button();
 28c:	8f e0       	ldi	r24, 0x0F	; 15
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN14JoystickButton11read_buttonEv>
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_21>:
ISR(ADC_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	PORTB = (PORTB & (~0x01))|(0x01 & (~PORTB));
 2d8:	85 b1       	in	r24, 0x05	; 5
 2da:	25 b1       	in	r18, 0x05	; 5
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	92 27       	eor	r25, r18
 2e0:	91 70       	andi	r25, 0x01	; 1
 2e2:	8e 7f       	andi	r24, 0xFE	; 254
 2e4:	89 2b       	or	r24, r25
 2e6:	85 b9       	out	0x05, r24	; 5
	myJSButton.read_joystick();
 2e8:	8f e0       	ldi	r24, 0x0F	; 15
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN14JoystickButton13read_joystickEv>
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <main>:

/** MAIN ALGORITHM **/
int main(void)
{
	setup();
 312:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z5setupv>
    /* Replace with your application code */
	
	UART_TxStr("Hello World!");
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z10UART_TxStrPc>
	
    while (1) 
    {
		if (time_ms > 40)
 31e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <time_ms>
 322:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <time_ms+0x1>
 326:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <time_ms+0x2>
 32a:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <time_ms+0x3>
 32e:	89 97       	sbiw	r24, 0x29	; 41
 330:	a1 05       	cpc	r26, r1
 332:	b1 05       	cpc	r27, r1
 334:	a0 f3       	brcs	.-24     	; 0x31e <main+0xc>
		{
			time_ms = 0;
 336:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <time_ms>
 33a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <time_ms+0x1>
 33e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <time_ms+0x2>
 342:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_ms+0x3>
			myRFData.TX_update_data(
 346:	8f e0       	ldi	r24, 0x0F	; 15
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN14JoystickButton18return_button_dataEv>
 34e:	d8 2f       	mov	r29, r24
 350:	8f e0       	ldi	r24, 0x0F	; 15
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN14JoystickButton13return_y_dataEv>
 358:	c8 2f       	mov	r28, r24
 35a:	8f e0       	ldi	r24, 0x0F	; 15
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN14JoystickButton13return_x_dataEv>
				myJSButton.return_x_data(),
				myJSButton.return_y_data(),
				myJSButton.return_button_data()
			);
 362:	2d 2f       	mov	r18, r29
 364:	4c 2f       	mov	r20, r28
 366:	68 2f       	mov	r22, r24
 368:	83 e1       	ldi	r24, 0x13	; 19
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN6RFData14TX_update_dataEhhh>
 370:	d6 cf       	rjmp	.-84     	; 0x31e <main+0xc>

00000372 <_GLOBAL__sub_I_time_ms>:
		}
    }
	return 0;
}
 372:	6f ef       	ldi	r22, 0xFF	; 255
 374:	7f ef       	ldi	r23, 0xFF	; 255
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z41__static_initialization_and_destruction_0ii>
 37e:	08 95       	ret

00000380 <_Z14RF433UART_Initv>:
	UART_TxStr(AT_SETBAUD);
	delay1ms(100);
	
	// In this time, we have changed the module settings. Return it into transmission mode
	AT_PORT = AT_PORT | (AT_CTRPIN);
	delay1ms(200);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 386:	8f e9       	ldi	r24, 0x9F	; 159
 388:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 38c:	e1 ec       	ldi	r30, 0xC1	; 193
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	88 e1       	ldi	r24, 0x18	; 24
 392:	80 83       	st	Z, r24
 394:	80 81       	ld	r24, Z
 396:	80 83       	st	Z, r24
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 39e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3a2:	88 23       	and	r24, r24
 3a4:	2c f4       	brge	.+10     	; 0x3b0 <_Z14RF433UART_Initv+0x30>
 3a6:	e0 ec       	ldi	r30, 0xC0	; 192
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	80 83       	st	Z, r24
 3b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3b4:	86 ff       	sbrs	r24, 6
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <_Z14RF433UART_Initv+0x42>
 3b8:	e0 ec       	ldi	r30, 0xC0	; 192
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	80 64       	ori	r24, 0x40	; 64
 3c0:	80 83       	st	Z, r24
 3c2:	e1 ec       	ldi	r30, 0xC1	; 193
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	80 6c       	ori	r24, 0xC0	; 192
 3ca:	80 83       	st	Z, r24
 3cc:	08 95       	ret

000003ce <_Z11UART_TxCharc>:
 3ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3d2:	95 ff       	sbrs	r25, 5
 3d4:	fc cf       	rjmp	.-8      	; 0x3ce <_Z11UART_TxCharc>
 3d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3da:	08 95       	ret

000003dc <_Z10UART_TxStrPc>:
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	8c 01       	movw	r16, r24
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	f8 01       	movw	r30, r16
 3ec:	ec 0f       	add	r30, r28
 3ee:	fd 1f       	adc	r31, r29
 3f0:	80 81       	ld	r24, Z
 3f2:	88 23       	and	r24, r24
 3f4:	21 f0       	breq	.+8      	; 0x3fe <_Z10UART_TxStrPc+0x22>
 3f6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z11UART_TxCharc>
 3fa:	21 96       	adiw	r28, 0x01	; 1
 3fc:	f6 cf       	rjmp	.-20     	; 0x3ea <_Z10UART_TxStrPc+0xe>
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <_ZN6RFData12_ParityCheckEhh>:
 408:	86 2f       	mov	r24, r22
 40a:	84 27       	eor	r24, r20
 40c:	08 95       	ret

0000040e <_ZN6RFData4initEv>:
}

void RFData::init(void)
{
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	ec 01       	movw	r28, r24
	RF433UART_Init();
 414:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14RF433UART_Initv>
	this->_tx_pointer = 0;
 418:	1f 86       	std	Y+15, r1	; 0x0f
 41a:	1e 86       	std	Y+14, r1	; 0x0e
	this->_rx_pointer = 0;
 41c:	19 8a       	std	Y+17, r1	; 0x11
 41e:	18 8a       	std	Y+16, r1	; 0x10
	this->_tx_status = EMPTY;
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	88 83       	st	Y, r24
	this->_rx_status = EMPTY;
 424:	89 83       	std	Y+1, r24	; 0x01
	
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <_ZN6RFData14TX_update_dataEhhh>:
void RFData::TX_update_data(unsigned char x_data, unsigned char y_data, unsigned char button_data)
{
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
	// Updating data of joystick and pushed button that will be sent to receiver
	// Only update it when status is EMPTY
	if (this->_tx_status == EMPTY)
 432:	fc 01       	movw	r30, r24
 434:	30 81       	ld	r19, Z
 436:	32 30       	cpi	r19, 0x02	; 2
 438:	89 f4       	brne	.+34     	; 0x45c <_ZN6RFData14TX_update_dataEhhh+0x30>
 43a:	12 2f       	mov	r17, r18
 43c:	ec 01       	movw	r28, r24
	{	
		this->_tx_pointer = 0;
 43e:	17 86       	std	Z+15, r1	; 0x0f
 440:	16 86       	std	Z+14, r1	; 0x0e
		this->_tx_buffer[X_DATA]			= x_data;												// Analog joystick, horizontal axis
 442:	62 83       	std	Z+2, r22	; 0x02
		this->_tx_buffer[Y_DATA]			= y_data;												// Analog joystick, vertical axis
 444:	43 83       	std	Z+3, r20	; 0x03
		this->_tx_buffer[BUTTON_DATA]		= button_data;											// Buttons
 446:	2c 83       	std	Y+4, r18	; 0x04
		this->_tx_buffer[MSG_PARITY]		= this->_ParityCheck(x_data, y_data);					// Stop bits consisting last parity checker
 448:	0e 94 04 02 	call	0x408	; 0x408 <_ZN6RFData12_ParityCheckEhh>
 44c:	8d 83       	std	Y+5, r24	; 0x05
		this->_tx_buffer[MSG_PARITY]		= this->_ParityCheck(this->_tx_buffer[3], button_data);	// Stop bits consisting last parity checker
 44e:	41 2f       	mov	r20, r17
 450:	68 2f       	mov	r22, r24
 452:	ce 01       	movw	r24, r28
 454:	0e 94 04 02 	call	0x408	; 0x408 <_ZN6RFData12_ParityCheckEhh>
 458:	8d 83       	std	Y+5, r24	; 0x05
		
		this->_tx_status = READY;																	// Data is ready to be transmitted
 45a:	18 82       	st	Y, r1
	}
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	08 95       	ret

00000464 <_ZN6RFData16ISR_transmittingEv>:



void RFData::ISR_transmitting(void)
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	ec 01       	movw	r28, r24
	switch (this->_tx_status)
 46a:	88 81       	ld	r24, Y
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	51 f0       	breq	.+20     	; 0x484 <_ZN6RFData16ISR_transmittingEv+0x20>
 470:	18 f0       	brcs	.+6      	; 0x478 <_ZN6RFData16ISR_transmittingEv+0x14>
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	c1 f0       	breq	.+48     	; 0x4a6 <_ZN6RFData16ISR_transmittingEv+0x42>
 476:	1a c0       	rjmp	.+52     	; 0x4ac <_ZN6RFData16ISR_transmittingEv+0x48>
	{
	case READY:
		// Change status to BUSY
		this->_tx_status = BUSY;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	88 83       	st	Y, r24
		// Send '@' as start byte
		UART_TxChar(START_BYTE);
 47c:	80 e4       	ldi	r24, 0x40	; 64
 47e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z11UART_TxCharc>
		break;
 482:	14 c0       	rjmp	.+40     	; 0x4ac <_ZN6RFData16ISR_transmittingEv+0x48>
	case BUSY:
		UART_TxChar(this->_tx_buffer[_tx_pointer]);
 484:	ee 85       	ldd	r30, Y+14	; 0x0e
 486:	ff 85       	ldd	r31, Y+15	; 0x0f
 488:	ec 0f       	add	r30, r28
 48a:	fd 1f       	adc	r31, r29
 48c:	82 81       	ldd	r24, Z+2	; 0x02
 48e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z11UART_TxCharc>
		_tx_pointer ++;
 492:	8e 85       	ldd	r24, Y+14	; 0x0e
 494:	9f 85       	ldd	r25, Y+15	; 0x0f
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	9f 87       	std	Y+15, r25	; 0x0f
 49a:	8e 87       	std	Y+14, r24	; 0x0e
		if (_tx_pointer >= TX_MSG_SIZE) {this->_tx_status = EMPTY;}
 49c:	04 97       	sbiw	r24, 0x04	; 4
 49e:	30 f0       	brcs	.+12     	; 0x4ac <_ZN6RFData16ISR_transmittingEv+0x48>
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	88 83       	st	Y, r24
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <_ZN6RFData16ISR_transmittingEv+0x48>
		break;
	case EMPTY:
		// Standby mode, just send '\n'
		UART_TxChar(IDLING_BYTE);
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z11UART_TxCharc>
		break;
	}
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <__tablejump2__>:
 4b2:	ee 0f       	add	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	05 90       	lpm	r0, Z+
 4b8:	f4 91       	lpm	r31, Z
 4ba:	e0 2d       	mov	r30, r0
 4bc:	09 94       	ijmp

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
