
RF433 Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001062  000010f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001062  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  0080010e  0080010e  00001104  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000205c  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3c  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbe  00000000  00000000  00003f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000420  00000000  00000000  00004f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dc9  00000000  00000000  00005364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e01  00000000  00000000  0000612d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_18>
      4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      50:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_20>
      54:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      58:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      5c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      60:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_24>
      64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      68:	14 02       	muls	r17, r20
      6a:	42 05       	cpc	r20, r2
      6c:	42 05       	cpc	r20, r2
      6e:	42 05       	cpc	r20, r2
      70:	42 05       	cpc	r20, r2
      72:	42 05       	cpc	r20, r2
      74:	42 05       	cpc	r20, r2
      76:	42 05       	cpc	r20, r2
      78:	31 02       	muls	r19, r17
      7a:	42 05       	cpc	r20, r2
      7c:	42 05       	cpc	r20, r2
      7e:	42 05       	cpc	r20, r2
      80:	42 05       	cpc	r20, r2
      82:	42 05       	cpc	r20, r2
      84:	42 05       	cpc	r20, r2
      86:	42 05       	cpc	r20, r2
      88:	4e 02       	muls	r20, r30
      8a:	42 05       	cpc	r20, r2
      8c:	42 05       	cpc	r20, r2
      8e:	42 05       	cpc	r20, r2
      90:	42 05       	cpc	r20, r2
      92:	42 05       	cpc	r20, r2
      94:	42 05       	cpc	r20, r2
      96:	42 05       	cpc	r20, r2
      98:	6e 02       	muls	r22, r30
      9a:	42 05       	cpc	r20, r2
      9c:	42 05       	cpc	r20, r2
      9e:	42 05       	cpc	r20, r2
      a0:	42 05       	cpc	r20, r2
      a2:	42 05       	cpc	r20, r2
      a4:	42 05       	cpc	r20, r2
      a6:	42 05       	cpc	r20, r2
      a8:	82 02       	muls	r24, r18
      aa:	42 05       	cpc	r20, r2
      ac:	42 05       	cpc	r20, r2
      ae:	42 05       	cpc	r20, r2
      b0:	42 05       	cpc	r20, r2
      b2:	42 05       	cpc	r20, r2
      b4:	42 05       	cpc	r20, r2
      b6:	42 05       	cpc	r20, r2
      b8:	b5 02       	muls	r27, r21
      ba:	42 05       	cpc	r20, r2
      bc:	42 05       	cpc	r20, r2
      be:	42 05       	cpc	r20, r2
      c0:	42 05       	cpc	r20, r2
      c2:	42 05       	cpc	r20, r2
      c4:	42 05       	cpc	r20, r2
      c6:	42 05       	cpc	r20, r2
      c8:	c9 02       	muls	r28, r25
      ca:	42 05       	cpc	r20, r2
      cc:	42 05       	cpc	r20, r2
      ce:	42 05       	cpc	r20, r2
      d0:	42 05       	cpc	r20, r2
      d2:	42 05       	cpc	r20, r2
      d4:	42 05       	cpc	r20, r2
      d6:	42 05       	cpc	r20, r2
      d8:	f5 02       	muls	r31, r21
      da:	42 05       	cpc	r20, r2
      dc:	42 05       	cpc	r20, r2
      de:	42 05       	cpc	r20, r2
      e0:	42 05       	cpc	r20, r2
      e2:	42 05       	cpc	r20, r2
      e4:	42 05       	cpc	r20, r2
      e6:	42 05       	cpc	r20, r2
      e8:	0f 03       	fmul	r16, r23
      ea:	42 05       	cpc	r20, r2
      ec:	42 05       	cpc	r20, r2
      ee:	42 05       	cpc	r20, r2
      f0:	42 05       	cpc	r20, r2
      f2:	42 05       	cpc	r20, r2
      f4:	42 05       	cpc	r20, r2
      f6:	42 05       	cpc	r20, r2
      f8:	23 03       	mulsu	r18, r19
      fa:	42 05       	cpc	r20, r2
      fc:	42 05       	cpc	r20, r2
      fe:	42 05       	cpc	r20, r2
     100:	42 05       	cpc	r20, r2
     102:	42 05       	cpc	r20, r2
     104:	42 05       	cpc	r20, r2
     106:	42 05       	cpc	r20, r2
     108:	66 03       	mulsu	r22, r22
     10a:	42 05       	cpc	r20, r2
     10c:	42 05       	cpc	r20, r2
     10e:	42 05       	cpc	r20, r2
     110:	42 05       	cpc	r20, r2
     112:	42 05       	cpc	r20, r2
     114:	42 05       	cpc	r20, r2
     116:	42 05       	cpc	r20, r2
     118:	7b 03       	fmul	r23, r19
     11a:	42 05       	cpc	r20, r2
     11c:	42 05       	cpc	r20, r2
     11e:	42 05       	cpc	r20, r2
     120:	42 05       	cpc	r20, r2
     122:	42 05       	cpc	r20, r2
     124:	42 05       	cpc	r20, r2
     126:	42 05       	cpc	r20, r2
     128:	81 03       	fmuls	r16, r17
     12a:	42 05       	cpc	r20, r2
     12c:	42 05       	cpc	r20, r2
     12e:	42 05       	cpc	r20, r2
     130:	42 05       	cpc	r20, r2
     132:	42 05       	cpc	r20, r2
     134:	42 05       	cpc	r20, r2
     136:	42 05       	cpc	r20, r2
     138:	87 03       	fmuls	r16, r23
     13a:	42 05       	cpc	r20, r2
     13c:	42 05       	cpc	r20, r2
     13e:	42 05       	cpc	r20, r2
     140:	42 05       	cpc	r20, r2
     142:	42 05       	cpc	r20, r2
     144:	42 05       	cpc	r20, r2
     146:	42 05       	cpc	r20, r2
     148:	8d 03       	fmulsu	r16, r21
     14a:	42 05       	cpc	r20, r2
     14c:	42 05       	cpc	r20, r2
     14e:	42 05       	cpc	r20, r2
     150:	42 05       	cpc	r20, r2
     152:	42 05       	cpc	r20, r2
     154:	42 05       	cpc	r20, r2
     156:	42 05       	cpc	r20, r2
     158:	93 03       	fmuls	r17, r19
     15a:	42 05       	cpc	r20, r2
     15c:	42 05       	cpc	r20, r2
     15e:	42 05       	cpc	r20, r2
     160:	42 05       	cpc	r20, r2
     162:	42 05       	cpc	r20, r2
     164:	42 05       	cpc	r20, r2
     166:	42 05       	cpc	r20, r2
     168:	bc 03       	fmulsu	r19, r20
     16a:	42 05       	cpc	r20, r2
     16c:	42 05       	cpc	r20, r2
     16e:	42 05       	cpc	r20, r2
     170:	42 05       	cpc	r20, r2
     172:	42 05       	cpc	r20, r2
     174:	42 05       	cpc	r20, r2
     176:	42 05       	cpc	r20, r2
     178:	e8 03       	fmulsu	r22, r16
     17a:	42 05       	cpc	r20, r2
     17c:	42 05       	cpc	r20, r2
     17e:	42 05       	cpc	r20, r2
     180:	42 05       	cpc	r20, r2
     182:	42 05       	cpc	r20, r2
     184:	42 05       	cpc	r20, r2
     186:	42 05       	cpc	r20, r2
     188:	08 04       	cpc	r0, r8
     18a:	42 05       	cpc	r20, r2
     18c:	42 05       	cpc	r20, r2
     18e:	42 05       	cpc	r20, r2
     190:	42 05       	cpc	r20, r2
     192:	42 05       	cpc	r20, r2
     194:	42 05       	cpc	r20, r2
     196:	42 05       	cpc	r20, r2
     198:	2b 04       	cpc	r2, r11
     19a:	42 05       	cpc	r20, r2
     19c:	42 05       	cpc	r20, r2
     19e:	42 05       	cpc	r20, r2
     1a0:	42 05       	cpc	r20, r2
     1a2:	42 05       	cpc	r20, r2
     1a4:	42 05       	cpc	r20, r2
     1a6:	42 05       	cpc	r20, r2
     1a8:	35 04       	cpc	r3, r5
     1aa:	42 05       	cpc	r20, r2
     1ac:	42 05       	cpc	r20, r2
     1ae:	42 05       	cpc	r20, r2
     1b0:	42 05       	cpc	r20, r2
     1b2:	42 05       	cpc	r20, r2
     1b4:	42 05       	cpc	r20, r2
     1b6:	42 05       	cpc	r20, r2
     1b8:	89 04       	cpc	r8, r9
     1ba:	42 05       	cpc	r20, r2
     1bc:	42 05       	cpc	r20, r2
     1be:	42 05       	cpc	r20, r2
     1c0:	42 05       	cpc	r20, r2
     1c2:	42 05       	cpc	r20, r2
     1c4:	42 05       	cpc	r20, r2
     1c6:	42 05       	cpc	r20, r2
     1c8:	dd 04       	cpc	r13, r13
     1ca:	42 05       	cpc	r20, r2
     1cc:	42 05       	cpc	r20, r2
     1ce:	42 05       	cpc	r20, r2
     1d0:	42 05       	cpc	r20, r2
     1d2:	42 05       	cpc	r20, r2
     1d4:	42 05       	cpc	r20, r2
     1d6:	42 05       	cpc	r20, r2
     1d8:	2e 05       	cpc	r18, r14
     1da:	42 05       	cpc	r20, r2
     1dc:	42 05       	cpc	r20, r2
     1de:	42 05       	cpc	r20, r2
     1e0:	42 05       	cpc	r20, r2
     1e2:	42 05       	cpc	r20, r2
     1e4:	42 05       	cpc	r20, r2
     1e6:	42 05       	cpc	r20, r2
     1e8:	38 05       	cpc	r19, r8

000001ea <__ctors_start>:
     1ea:	3a 06       	cpc	r3, r26

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d8 e0       	ldi	r29, 0x08	; 8
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e2 e6       	ldi	r30, 0x62	; 98
     200:	f0 e1       	ldi	r31, 0x10	; 16
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ae 30       	cpi	r26, 0x0E	; 14
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	ae e0       	ldi	r26, 0x0E	; 14
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a6 37       	cpi	r26, 0x76	; 118
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>

0000021e <__do_global_ctors>:
     21e:	10 e0       	ldi	r17, 0x00	; 0
     220:	c6 ef       	ldi	r28, 0xF6	; 246
     222:	d0 e0       	ldi	r29, 0x00	; 0
     224:	04 c0       	rjmp	.+8      	; 0x22e <__do_global_ctors+0x10>
     226:	21 97       	sbiw	r28, 0x01	; 1
     228:	fe 01       	movw	r30, r28
     22a:	0e 94 29 08 	call	0x1052	; 0x1052 <__tablejump2__>
     22e:	c5 3f       	cpi	r28, 0xF5	; 245
     230:	d1 07       	cpc	r29, r17
     232:	c9 f7       	brne	.-14     	; 0x226 <__do_global_ctors+0x8>
     234:	0e 94 a9 05 	call	0xb52	; 0xb52 <main>
     238:	0c 94 2f 08 	jmp	0x105e	; 0x105e <_exit>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <_ZN6tagI2C5beginEmh>:
	);
}

void tagI2C::attachExtCase(void (*proc)(UCHAR status))
{
	tagI2C::ExtProc = proc;
     240:	cf 93       	push	r28
     242:	c4 2f       	mov	r28, r20
     244:	e9 eb       	ldi	r30, 0xB9	; 185
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	20 81       	ld	r18, Z
     24a:	2c 7f       	andi	r18, 0xFC	; 252
     24c:	20 83       	st	Z, r18
     24e:	9b 01       	movw	r18, r22
     250:	ac 01       	movw	r20, r24
     252:	22 0f       	add	r18, r18
     254:	33 1f       	adc	r19, r19
     256:	44 1f       	adc	r20, r20
     258:	55 1f       	adc	r21, r21
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	74 e2       	ldi	r23, 0x24	; 36
     25e:	84 ef       	ldi	r24, 0xF4	; 244
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 07 08 	call	0x100e	; 0x100e <__udivmodsi4>
     266:	ba 01       	movw	r22, r20
     268:	a9 01       	movw	r20, r18
     26a:	48 50       	subi	r20, 0x08	; 8
     26c:	51 09       	sbc	r21, r1
     26e:	61 09       	sbc	r22, r1
     270:	71 09       	sbc	r23, r1
     272:	4f 3f       	cpi	r20, 0xFF	; 255
     274:	51 05       	cpc	r21, r1
     276:	61 05       	cpc	r22, r1
     278:	71 05       	cpc	r23, r1
     27a:	e1 f1       	breq	.+120    	; 0x2f4 <_ZN6tagI2C5beginEmh+0xb4>
     27c:	d8 f1       	brcs	.+118    	; 0x2f4 <_ZN6tagI2C5beginEmh+0xb4>
     27e:	e9 eb       	ldi	r30, 0xB9	; 185
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8c 7f       	andi	r24, 0xFC	; 252
     286:	81 60       	ori	r24, 0x01	; 1
     288:	80 83       	st	Z, r24
     28a:	db 01       	movw	r26, r22
     28c:	ca 01       	movw	r24, r20
     28e:	b6 95       	lsr	r27
     290:	a7 95       	ror	r26
     292:	97 95       	ror	r25
     294:	87 95       	ror	r24
     296:	b6 95       	lsr	r27
     298:	a7 95       	ror	r26
     29a:	97 95       	ror	r25
     29c:	87 95       	ror	r24
     29e:	8f 3f       	cpi	r24, 0xFF	; 255
     2a0:	91 05       	cpc	r25, r1
     2a2:	a1 05       	cpc	r26, r1
     2a4:	b1 05       	cpc	r27, r1
     2a6:	09 f1       	breq	.+66     	; 0x2ea <_ZN6tagI2C5beginEmh+0xaa>
     2a8:	00 f1       	brcs	.+64     	; 0x2ea <_ZN6tagI2C5beginEmh+0xaa>
     2aa:	80 81       	ld	r24, Z
     2ac:	8c 7f       	andi	r24, 0xFC	; 252
     2ae:	82 60       	ori	r24, 0x02	; 2
     2b0:	80 83       	st	Z, r24
     2b2:	db 01       	movw	r26, r22
     2b4:	ca 01       	movw	r24, r20
     2b6:	68 94       	set
     2b8:	13 f8       	bld	r1, 3
     2ba:	b6 95       	lsr	r27
     2bc:	a7 95       	ror	r26
     2be:	97 95       	ror	r25
     2c0:	87 95       	ror	r24
     2c2:	16 94       	lsr	r1
     2c4:	d1 f7       	brne	.-12     	; 0x2ba <_ZN6tagI2C5beginEmh+0x7a>
     2c6:	8f 3f       	cpi	r24, 0xFF	; 255
     2c8:	91 05       	cpc	r25, r1
     2ca:	a1 05       	cpc	r26, r1
     2cc:	b1 05       	cpc	r27, r1
     2ce:	81 f0       	breq	.+32     	; 0x2f0 <_ZN6tagI2C5beginEmh+0xb0>
     2d0:	78 f0       	brcs	.+30     	; 0x2f0 <_ZN6tagI2C5beginEmh+0xb0>
     2d2:	80 81       	ld	r24, Z
     2d4:	83 60       	ori	r24, 0x03	; 3
     2d6:	80 83       	st	Z, r24
     2d8:	68 94       	set
     2da:	15 f8       	bld	r1, 5
     2dc:	76 95       	lsr	r23
     2de:	67 95       	ror	r22
     2e0:	57 95       	ror	r21
     2e2:	47 95       	ror	r20
     2e4:	16 94       	lsr	r1
     2e6:	d1 f7       	brne	.-12     	; 0x2dc <_ZN6tagI2C5beginEmh+0x9c>
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <_ZN6tagI2C5beginEmh+0xb4>
     2ea:	ac 01       	movw	r20, r24
     2ec:	bd 01       	movw	r22, r26
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_ZN6tagI2C5beginEmh+0xb4>
     2f0:	ac 01       	movw	r20, r24
     2f2:	bd 01       	movw	r22, r26
     2f4:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     2f8:	8c 2f       	mov	r24, r28
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	81 60       	ori	r24, 0x01	; 1
     302:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
     306:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <_ZN6tagI2C7devAddrE>
     30a:	85 e4       	ldi	r24, 0x45	; 69
     30c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <_ZN6tagI2C9commStartEv>:
     314:	ec eb       	ldi	r30, 0xBC	; 188
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	8b 74       	andi	r24, 0x4B	; 75
     31c:	84 6a       	ori	r24, 0xA4	; 164
     31e:	80 83       	st	Z, r24
     320:	08 95       	ret

00000322 <_ZN6tagI2C8commStopEv>:
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     328:	ec eb       	ldi	r30, 0xBC	; 188
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8b 74       	andi	r24, 0x4B	; 75
     330:	84 69       	ori	r24, 0x94	; 148
     332:	80 83       	st	Z, r24
     334:	08 95       	ret

00000336 <_ZN6tagI2C8commSLAWEh>:
     336:	88 0f       	add	r24, r24
     338:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     33c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     340:	ec eb       	ldi	r30, 0xBC	; 188
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	8b 74       	andi	r24, 0x4B	; 75
     348:	84 68       	ori	r24, 0x84	; 132
     34a:	80 83       	st	Z, r24
     34c:	08 95       	ret

0000034e <_ZN6tagI2C10commTrDataEh>:
     34e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     352:	ec eb       	ldi	r30, 0xBC	; 188
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8b 74       	andi	r24, 0x4B	; 75
     35a:	84 68       	ori	r24, 0x84	; 132
     35c:	80 83       	st	Z, r24
     35e:	08 95       	ret

00000360 <_ZN6tagI2C9MTransmitEPcjh>:
     360:	9c 01       	movw	r18, r24
     362:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     366:	98 30       	cpi	r25, 0x08	; 8
     368:	a9 f4       	brne	.+42     	; 0x394 <_ZN6tagI2C9MTransmitEPcjh+0x34>
     36a:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <_ZN6tagI2C8pcTrDataE+0x1>
     36e:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <_ZN6tagI2C8pcTrDataE>
     372:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     376:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
     37a:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
     37e:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <_ZN6tagI2C12uiTrDataSizeE+0x1>
     382:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <_ZN6tagI2C12uiTrDataSizeE>
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     38c:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN6tagI2C9commStartEv>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	08 95       	ret
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	08 95       	ret

00000398 <_ZN6tagI2C8commSLAREh>:
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     3aa:	ec eb       	ldi	r30, 0xBC	; 188
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	8b 74       	andi	r24, 0x4B	; 75
     3b2:	84 68       	ori	r24, 0x84	; 132
     3b4:	80 83       	st	Z, r24
     3b6:	08 95       	ret

000003b8 <_ZN6tagI2C11commRecDataE13MR_DataStatus>:
     3b8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	39 f4       	brne	.+14     	; 0x3ce <_ZN6tagI2C11commRecDataE13MR_DataStatus+0x16>
     3c0:	ec eb       	ldi	r30, 0xBC	; 188
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8b 70       	andi	r24, 0x0B	; 11
     3c8:	84 68       	ori	r24, 0x84	; 132
     3ca:	80 83       	st	Z, r24
     3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <_ZN6tagI2C11commRecDataE13MR_DataStatus+0x38>
     3ce:	81 11       	cpse	r24, r1
     3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <_ZN6tagI2C11commRecDataE13MR_DataStatus+0x28>
     3d2:	ec eb       	ldi	r30, 0xBC	; 188
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	8b 70       	andi	r24, 0x0B	; 11
     3da:	84 6c       	ori	r24, 0xC4	; 196
     3dc:	80 83       	st	Z, r24
     3de:	08 c0       	rjmp	.+16     	; 0x3f0 <_ZN6tagI2C11commRecDataE13MR_DataStatus+0x38>
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	31 f4       	brne	.+12     	; 0x3f0 <_ZN6tagI2C11commRecDataE13MR_DataStatus+0x38>
     3e4:	ec eb       	ldi	r30, 0xBC	; 188
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	8b 70       	andi	r24, 0x0B	; 11
     3ec:	84 6d       	ori	r24, 0xD4	; 212
     3ee:	80 83       	st	Z, r24
     3f0:	89 2f       	mov	r24, r25
     3f2:	08 95       	ret

000003f4 <_ZN6tagI2C23commBeginSlaveReceivingEv>:
     3f4:	ec eb       	ldi	r30, 0xBC	; 188
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	8f 72       	andi	r24, 0x2F	; 47
     3fc:	80 6c       	ori	r24, 0xC0	; 192
     3fe:	80 83       	st	Z, r24
     400:	08 95       	ret

00000402 <_ZN6tagI2C7I2C_ISREv>:
}

void tagI2C::I2C_ISR(void) 
{	// UNFINISHED
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
	tagI2C::status = (TWSR & 0xF8);
     406:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     40a:	88 7f       	andi	r24, 0xF8	; 248
     40c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_ZN6tagI2C6statusE>
	switch(tagI2C::status)
     410:	48 2f       	mov	r20, r24
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	fa 01       	movw	r30, r20
     416:	38 97       	sbiw	r30, 0x08	; 8
     418:	e1 3c       	cpi	r30, 0xC1	; 193
     41a:	f1 05       	cpc	r31, r1
     41c:	08 f0       	brcs	.+2      	; 0x420 <_ZN6tagI2C7I2C_ISREv+0x1e>
     41e:	32 c3       	rjmp	.+1636   	; 0xa84 <__stack+0x185>
     420:	ec 5c       	subi	r30, 0xCC	; 204
     422:	ff 4f       	sbci	r31, 0xFF	; 255
     424:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__tablejump2__>
	{
	case I2C_START_COMP:
		switch(tagI2C::mode)
     428:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	19 f0       	breq	.+6      	; 0x436 <_ZN6tagI2C7I2C_ISREv+0x34>
     430:	83 30       	cpi	r24, 0x03	; 3
     432:	41 f0       	breq	.+16     	; 0x444 <_ZN6tagI2C7I2C_ISREv+0x42>
     434:	0f c0       	rjmp	.+30     	; 0x454 <_ZN6tagI2C7I2C_ISREv+0x52>
		{	// UNFINISHED
		case READY_M_TRANSMIT:
			tagI2C::mode = MT_MODE;
     436:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			tagI2C::commSLAW(tagI2C::ucTargetAdr);
     43a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
     43e:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN6tagI2C8commSLAWEh>
			break;
     442:	30 c3       	rjmp	.+1632   	; 0xaa4 <__stack+0x1a5>
		case READY_M_RECEIVE:
			tagI2C::mode = MR_MODE;
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			tagI2C::commSLAR(tagI2C::ucTargetAdr);
     44a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
     44e:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN6tagI2C8commSLAREh>
			break;
     452:	28 c3       	rjmp	.+1616   	; 0xaa4 <__stack+0x1a5>
		default :
			// Just send SLA+R with address of 0x00 before end transmission
			tagI2C::mode = FREE;
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			tagI2C::commSLAR(0x00);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN6tagI2C8commSLAREh>
			break;
     460:	21 c3       	rjmp	.+1602   	; 0xaa4 <__stack+0x1a5>
		}
		break;
	case I2C_RSTART_COMP:
		switch(tagI2C::mode)
     462:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     466:	81 30       	cpi	r24, 0x01	; 1
     468:	19 f0       	breq	.+6      	; 0x470 <_ZN6tagI2C7I2C_ISREv+0x6e>
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	41 f0       	breq	.+16     	; 0x47e <_ZN6tagI2C7I2C_ISREv+0x7c>
     46e:	0f c0       	rjmp	.+30     	; 0x48e <_ZN6tagI2C7I2C_ISREv+0x8c>
		{	// UNFINISHED
		case READY_M_TRANSMIT:
			tagI2C::mode = MT_MODE;
     470:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			tagI2C::commSLAW(tagI2C::ucTargetAdr);
     474:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
     478:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN6tagI2C8commSLAWEh>
			break;
     47c:	13 c3       	rjmp	.+1574   	; 0xaa4 <__stack+0x1a5>
		case READY_M_RECEIVE:
			tagI2C::mode = MR_MODE;
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			tagI2C::commSLAR(tagI2C::ucTargetAdr);
     484:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
     488:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN6tagI2C8commSLAREh>
			break;
     48c:	0b c3       	rjmp	.+1558   	; 0xaa4 <__stack+0x1a5>
		default :
			// Just send SLA+R with address of 0x00 before end transmission
			tagI2C::mode = FREE;
     48e:	88 e0       	ldi	r24, 0x08	; 8
     490:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			tagI2C::commSLAR(0x00);
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN6tagI2C8commSLAREh>
			break;
     49a:	04 c3       	rjmp	.+1544   	; 0xaa4 <__stack+0x1a5>
		}
		break;
	case I2C_MTSLAW_ACK:
		// In here, we assume the device only in MT mode
		if (tagI2C::uiTrDataIndx < tagI2C::uiTrDataSize)
     49c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
     4a0:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     4a4:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <_ZN6tagI2C12uiTrDataSizeE>
     4a8:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <_ZN6tagI2C12uiTrDataSizeE+0x1>
     4ac:	82 17       	cp	r24, r18
     4ae:	93 07       	cpc	r25, r19
     4b0:	08 f0       	brcs	.+2      	; 0x4b4 <_ZN6tagI2C7I2C_ISREv+0xb2>
     4b2:	f8 c2       	rjmp	.+1520   	; 0xaa4 <__stack+0x1a5>
		{
			tagI2C::commTrData(tagI2C::pcTrData[tagI2C::uiTrDataIndx]);
     4b4:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <_ZN6tagI2C8pcTrDataE>
     4b8:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <_ZN6tagI2C8pcTrDataE+0x1>
     4bc:	f9 01       	movw	r30, r18
     4be:	e8 0f       	add	r30, r24
     4c0:	f9 1f       	adc	r31, r25
     4c2:	80 81       	ld	r24, Z
     4c4:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN6tagI2C10commTrDataEh>
			tagI2C::uiTrDataIndx ++;
     4c8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
     4cc:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     4d6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
     4da:	e4 c2       	rjmp	.+1480   	; 0xaa4 <__stack+0x1a5>
		}
		break;
	case I2C_MTSLAW_NACK:
		// In here, we the slave does not acknowledge for us to transmit data
		// stop transmit process
		tagI2C::pcTrData = 0x00;
     4dc:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZN6tagI2C8pcTrDataE+0x1>
     4e0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZN6tagI2C8pcTrDataE>
		tagI2C::uiTrDataIndx = 0;
     4e4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     4e8:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
		tagI2C::uiTrDataSize = 0;
     4ec:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZN6tagI2C12uiTrDataSizeE+0x1>
     4f0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <_ZN6tagI2C12uiTrDataSizeE>
		tagI2C::ucTargetAdr = 0x00;
     4f4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
		tagI2C::mode = FREE;
     4f8:	88 e0       	ldi	r24, 0x08	; 8
     4fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		tagI2C::commStop();
     4fe:	0e 94 91 01 	call	0x322	; 0x322 <_ZN6tagI2C8commStopEv>
		break;
     502:	d0 c2       	rjmp	.+1440   	; 0xaa4 <__stack+0x1a5>
	case I2C_MTDATA_ACK:
		// In here, previous byte has successfully transmitted and been acknowledged
		// by the slave
		// Proceed into next byte
		if (tagI2C::uiTrDataIndx < tagI2C::uiTrDataSize)
     504:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
     508:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     50c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <_ZN6tagI2C12uiTrDataSizeE>
     510:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <_ZN6tagI2C12uiTrDataSizeE+0x1>
     514:	82 17       	cp	r24, r18
     516:	93 07       	cpc	r25, r19
     518:	a0 f4       	brcc	.+40     	; 0x542 <_ZN6tagI2C7I2C_ISREv+0x140>
		{
			tagI2C::commTrData(tagI2C::pcTrData[tagI2C::uiTrDataIndx]);
     51a:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <_ZN6tagI2C8pcTrDataE>
     51e:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <_ZN6tagI2C8pcTrDataE+0x1>
     522:	f9 01       	movw	r30, r18
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
     528:	80 81       	ld	r24, Z
     52a:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN6tagI2C10commTrDataEh>
			tagI2C::uiTrDataIndx ++;
     52e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
     532:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     53c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
     540:	b1 c2       	rjmp	.+1378   	; 0xaa4 <__stack+0x1a5>
		} else {
			// All data byte has been sended
			// Proceed to end transmission
			tagI2C::pcTrData = 0x00;
     542:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZN6tagI2C8pcTrDataE+0x1>
     546:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZN6tagI2C8pcTrDataE>
			tagI2C::uiTrDataIndx = 0;
     54a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     54e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
			tagI2C::uiTrDataSize = 0;
     552:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZN6tagI2C12uiTrDataSizeE+0x1>
     556:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <_ZN6tagI2C12uiTrDataSizeE>
			tagI2C::ucTargetAdr = 0x00;
     55a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
			tagI2C::mode = FREE;
     55e:	88 e0       	ldi	r24, 0x08	; 8
     560:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			tagI2C::commStop();
     564:	0e 94 91 01 	call	0x322	; 0x322 <_ZN6tagI2C8commStopEv>
     568:	9d c2       	rjmp	.+1338   	; 0xaa4 <__stack+0x1a5>
		break;
	case I2C_MTDATA_NACK:
		// In here, previous data has been received but the slave send NACK
		// It also possible that the slave lost connection to I2C bus
		// Proceed to end transmission process
		tagI2C::pcTrData = 0x00;
     56a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZN6tagI2C8pcTrDataE+0x1>
     56e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZN6tagI2C8pcTrDataE>
		tagI2C::uiTrDataIndx = 0;
     572:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     576:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
		tagI2C::uiTrDataSize = 0;
     57a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZN6tagI2C12uiTrDataSizeE+0x1>
     57e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <_ZN6tagI2C12uiTrDataSizeE>
		tagI2C::ucTargetAdr = 0x00;
     582:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
		tagI2C::mode = FREE;
     586:	88 e0       	ldi	r24, 0x08	; 8
     588:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		tagI2C::commStop();
     58c:	0e 94 91 01 	call	0x322	; 0x322 <_ZN6tagI2C8commStopEv>
		break;
     590:	89 c2       	rjmp	.+1298   	; 0xaa4 <__stack+0x1a5>
	case I2C_MTARBL:
		// In here, device lost control over the bus
		// Just try to transmit again when the bus is free (for MT Mode)
		if (tagI2C::mode == MT_MODE)
     592:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     596:	81 11       	cpse	r24, r1
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <_ZN6tagI2C7I2C_ISREv+0x1b4>
		{
			tagI2C::uiTrDataIndx = 0;
     59a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN6tagI2C12uiTrDataIndxE+0x1>
     59e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_ZN6tagI2C12uiTrDataIndxE>
			tagI2C::mode = READY_M_TRANSMIT;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			TWCR = (TWCR & 0x4B) | _b(TWINT) | _b(TWSTA) | _b(TWEN);	
     5a8:	ec eb       	ldi	r30, 0xBC	; 188
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	8b 74       	andi	r24, 0x4B	; 75
     5b0:	84 6a       	ori	r24, 0xA4	; 164
     5b2:	80 83       	st	Z, r24
     5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <_ZN6tagI2C7I2C_ISREv+0x1d2>
		} 
		// Or Just try to Read again when the bus is free (for MT Mode)
		else if (tagI2C::mode == MR_MODE)
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	69 f4       	brne	.+26     	; 0x5d4 <_ZN6tagI2C7I2C_ISREv+0x1d2>
		{
			tagI2C::uiRecIndx = 0;
     5ba:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_ZN6tagI2C9uiRecIndxE+0x1>
     5be:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_ZN6tagI2C9uiRecIndxE>
			tagI2C::mode = READY_M_RECEIVE;
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			TWCR = (TWCR & 0x4B) | _b(TWINT) | _b(TWSTA) | _b(TWEN);
     5c8:	ec eb       	ldi	r30, 0xBC	; 188
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8b 74       	andi	r24, 0x4B	; 75
     5d0:	84 6a       	ori	r24, 0xA4	; 164
     5d2:	80 83       	st	Z, r24
		}
		// Make sure the TWINT is cleared
		if (TWCR & _b(TWINT))
     5d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5d8:	88 23       	and	r24, r24
     5da:	0c f0       	brlt	.+2      	; 0x5de <_ZN6tagI2C7I2C_ISREv+0x1dc>
     5dc:	63 c2       	rjmp	.+1222   	; 0xaa4 <__stack+0x1a5>
		{
			// Clear the TWINT bit by writing 1 to it
			TWCR = TWCR | _b(TWINT);
     5de:	ec eb       	ldi	r30, 0xBC	; 188
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	80 68       	ori	r24, 0x80	; 128
     5e6:	80 83       	st	Z, r24
     5e8:	5d c2       	rjmp	.+1210   	; 0xaa4 <__stack+0x1a5>
		break;
	case I2C_MRSLAR_ACK:	
		// EVALUATION IS NEED FOR tagI2C::mode == FREE
		// Requesting reading data from Slave has been acknowledged
		// Proceed to receive data and don't forget to acknowledge it aftermath
		if (tagI2C::mode == MR_MODE)
     5ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5ee:	82 30       	cpi	r24, 0x02	; 2
     5f0:	39 f4       	brne	.+14     	; 0x600 <_ZN6tagI2C7I2C_ISREv+0x1fe>
		{
			TWCR = (TWCR & 0x0B) | _b(TWEA) | _b(TWINT) | _b(TWEN);
     5f2:	ec eb       	ldi	r30, 0xBC	; 188
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8b 70       	andi	r24, 0x0B	; 11
     5fa:	84 6c       	ori	r24, 0xC4	; 196
     5fc:	80 83       	st	Z, r24
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <_ZN6tagI2C7I2C_ISREv+0x206>
		} else if (tagI2C::mode == FREE) {
     600:	88 30       	cpi	r24, 0x08	; 8
     602:	11 f4       	brne	.+4      	; 0x608 <_ZN6tagI2C7I2C_ISREv+0x206>
			tagI2C::commStop();
     604:	0e 94 91 01 	call	0x322	; 0x322 <_ZN6tagI2C8commStopEv>
		}
		if (TWCR & _b(TWINT))
     608:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     60c:	88 23       	and	r24, r24
     60e:	0c f0       	brlt	.+2      	; 0x612 <_ZN6tagI2C7I2C_ISREv+0x210>
     610:	49 c2       	rjmp	.+1170   	; 0xaa4 <__stack+0x1a5>
		{
			// Clear the TWINT bit by writing 1 to it
			TWCR = TWCR | _b(TWINT);
     612:	ec eb       	ldi	r30, 0xBC	; 188
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	80 68       	ori	r24, 0x80	; 128
     61a:	80 83       	st	Z, r24
     61c:	43 c2       	rjmp	.+1158   	; 0xaa4 <__stack+0x1a5>
		
		break;
	case I2C_MRSLAR_NACK:
		// Requesting reading data from Slave has been not acknowledged
		// Reset all parameter of receiving process
		tagI2C::pcRecData = 0x00;
     61e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <_ZN6tagI2C9pcRecDataE+0x1>
     622:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <_ZN6tagI2C9pcRecDataE>
		tagI2C::uiRecDataSize = 0;
     626:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_ZN6tagI2C13uiRecDataSizeE+0x1>
     62a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_ZN6tagI2C13uiRecDataSizeE>
		tagI2C::uiRecIndx = 0;
     62e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_ZN6tagI2C9uiRecIndxE+0x1>
     632:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_ZN6tagI2C9uiRecIndxE>
		tagI2C::ucTargetAdr = 0x00;
     636:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
		tagI2C::mode = FREE;
     63a:	88 e0       	ldi	r24, 0x08	; 8
     63c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		// Stop requesting reading
		tagI2C::commStop();
     640:	0e 94 91 01 	call	0x322	; 0x322 <_ZN6tagI2C8commStopEv>
		break;
     644:	2f c2       	rjmp	.+1118   	; 0xaa4 <__stack+0x1a5>
	case I2C_MRDATA_ACK :
		if (tagI2C::uiRecIndx < tagI2C::uiRecDataSize - 2)
     646:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <_ZN6tagI2C13uiRecDataSizeE>
     64a:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <_ZN6tagI2C13uiRecDataSizeE+0x1>
     64e:	22 50       	subi	r18, 0x02	; 2
     650:	31 09       	sbc	r19, r1
     652:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_ZN6tagI2C9uiRecIndxE>
     656:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <_ZN6tagI2C9uiRecIndxE+0x1>
     65a:	82 17       	cp	r24, r18
     65c:	93 07       	cpc	r25, r19
     65e:	a0 f4       	brcc	.+40     	; 0x688 <_ZN6tagI2C7I2C_ISREv+0x286>
		{
			// Read the data byte
			tagI2C::pcRecData[tagI2C::uiRecIndx] = tagI2C::commRecData(NOLAST);
     660:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <_ZN6tagI2C9pcRecDataE>
     664:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <_ZN6tagI2C9pcRecDataE+0x1>
     668:	c8 0f       	add	r28, r24
     66a:	d9 1f       	adc	r29, r25
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN6tagI2C11commRecDataE13MR_DataStatus>
     672:	88 83       	st	Y, r24
			tagI2C::uiRecIndx ++;
     674:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_ZN6tagI2C9uiRecIndxE>
     678:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <_ZN6tagI2C9uiRecIndxE+0x1>
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_ZN6tagI2C9uiRecIndxE+0x1>
     682:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_ZN6tagI2C9uiRecIndxE>
     686:	0e c2       	rjmp	.+1052   	; 0xaa4 <__stack+0x1a5>
		} 
		else if (tagI2C::uiRecIndx == tagI2C::uiRecDataSize - 2) {
     688:	28 17       	cp	r18, r24
     68a:	39 07       	cpc	r19, r25
     68c:	a1 f4       	brne	.+40     	; 0x6b6 <_ZN6tagI2C7I2C_ISREv+0x2b4>
			// Read the data byte and send NACK for next received data
			tagI2C::pcRecData[tagI2C::uiRecIndx] = tagI2C::commRecData(NEXTLAST);
     68e:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <_ZN6tagI2C9pcRecDataE>
     692:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <_ZN6tagI2C9pcRecDataE+0x1>
     696:	c8 0f       	add	r28, r24
     698:	d9 1f       	adc	r29, r25
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN6tagI2C11commRecDataE13MR_DataStatus>
     6a0:	88 83       	st	Y, r24
			tagI2C::uiRecIndx ++;
     6a2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_ZN6tagI2C9uiRecIndxE>
     6a6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <_ZN6tagI2C9uiRecIndxE+0x1>
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_ZN6tagI2C9uiRecIndxE+0x1>
     6b0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_ZN6tagI2C9uiRecIndxE>
     6b4:	f7 c1       	rjmp	.+1006   	; 0xaa4 <__stack+0x1a5>
		} else {
			// This is last data. However, this condition never met because for last
			// data, I2C_MRDATA_NACK will be received instead
			tagI2C::pcRecData[tagI2C::uiRecIndx] = tagI2C::commRecData(LAST);
     6b6:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <_ZN6tagI2C9pcRecDataE>
     6ba:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <_ZN6tagI2C9pcRecDataE+0x1>
     6be:	c8 0f       	add	r28, r24
     6c0:	d9 1f       	adc	r29, r25
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN6tagI2C11commRecDataE13MR_DataStatus>
     6c8:	88 83       	st	Y, r24
     6ca:	ec c1       	rjmp	.+984    	; 0xaa4 <__stack+0x1a5>
		}
		break;
	case I2C_MRDATA_NACK:
		// In this case, data has been received but master returned NACK
		// It indicates that the receiving process is finished.
		tagI2C::mode = FREE;
     6cc:	88 e0       	ldi	r24, 0x08	; 8
     6ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		tagI2C::pcRecData = 0x00;
     6d2:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <_ZN6tagI2C9pcRecDataE+0x1>
     6d6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <_ZN6tagI2C9pcRecDataE>
		tagI2C::uiRecDataSize = 0;
     6da:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_ZN6tagI2C13uiRecDataSizeE+0x1>
     6de:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_ZN6tagI2C13uiRecDataSizeE>
		tagI2C::uiRecIndx = 0;
     6e2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_ZN6tagI2C9uiRecIndxE+0x1>
     6e6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_ZN6tagI2C9uiRecIndxE>
		tagI2C::ucTargetAdr = 0x00;
     6ea:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZN6tagI2C11ucTargetAdrE>
		tagI2C::commRecData(LAST);
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN6tagI2C11commRecDataE13MR_DataStatus>
		break;
     6f4:	d7 c1       	rjmp	.+942    	; 0xaa4 <__stack+0x1a5>
	case I2C_SRSLAW_ACK:
		// Proceed to receive data and go to SR_MODE
		tagI2C::mode = SR_MODE;
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		tagI2C::commBeginSlaveReceiving();
     6fc:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN6tagI2C23commBeginSlaveReceivingEv>
		break;
     700:	d1 c1       	rjmp	.+930    	; 0xaa4 <__stack+0x1a5>
	case I2C_SRARBL_SLAW_ACK:
		// Losing in seizing control of the bus and addressed as slave instead
		// Proceed to SR mode
		tagI2C::mode = SR_MODE;
     702:	86 e0       	ldi	r24, 0x06	; 6
     704:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		tagI2C::commBeginSlaveReceiving();
     708:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN6tagI2C23commBeginSlaveReceivingEv>
		break;
     70c:	cb c1       	rjmp	.+918    	; 0xaa4 <__stack+0x1a5>
	case I2C_SRGENCALL_ACK:
		// Proceed to SR_MODE_GENCALL and only updating slRecBuff
		tagI2C::mode = SR_MODE_GENCALL;
     70e:	87 e0       	ldi	r24, 0x07	; 7
     710:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		tagI2C::commBeginSlaveReceiving();
     714:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN6tagI2C23commBeginSlaveReceivingEv>
		break;
     718:	c5 c1       	rjmp	.+906    	; 0xaa4 <__stack+0x1a5>
	case I2C_SRARBL_GENCALL_ACK:
		// Losing in seizing control over bus but receive general call from winning master
		// Proceed to SR_MODE_GENCALL
		tagI2C::mode = SR_MODE_GENCALL;
     71a:	87 e0       	ldi	r24, 0x07	; 7
     71c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		tagI2C::commBeginSlaveReceiving();
     720:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN6tagI2C23commBeginSlaveReceivingEv>
		break;
     724:	bf c1       	rjmp	.+894    	; 0xaa4 <__stack+0x1a5>
		// In this state, device has been addressed before, data has been received, and
		// device has sent ACK to master
		// *Never send NACK while in SR mode
		
		// Read the data
		if (tagI2C::slRecIdx < I2C_RECEIVEBUFFSIZE)
     726:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_ZN6tagI2C8slRecIdxE>
     72a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     72e:	84 31       	cpi	r24, 0x14	; 20
     730:	91 05       	cpc	r25, r1
     732:	60 f4       	brcc	.+24     	; 0x74c <_ZN6tagI2C7I2C_ISREv+0x34a>
		{
			tagI2C::slRecBuff[tagI2C::slRecIdx] = TWDR;
     734:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     738:	fc 01       	movw	r30, r24
     73a:	ea 5d       	subi	r30, 0xDA	; 218
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	20 83       	st	Z, r18
			tagI2C::slRecIdx ++;
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     746:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZN6tagI2C8slRecIdxE>
     74a:	06 c0       	rjmp	.+12     	; 0x758 <_ZN6tagI2C7I2C_ISREv+0x356>
		} else {
			tagI2C::slRecIdx = I2C_RECEIVEBUFFSIZE;
     74c:	84 e1       	ldi	r24, 0x14	; 20
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     754:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZN6tagI2C8slRecIdxE>
		}
		
		if (tagI2C::SRDataRoutine)
     758:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <_ZN6tagI2C13SRDataRoutineE>
     75c:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <_ZN6tagI2C13SRDataRoutineE+0x1>
     760:	30 97       	sbiw	r30, 0x00	; 0
     762:	19 f0       	breq	.+6      	; 0x76a <_ZN6tagI2C7I2C_ISREv+0x368>
		{
			tagI2C::SRDataRoutine(TWDR);
     764:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     768:	09 95       	icall
		}
		// Proceed to receive next byte and send ACK for next byte
		TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     76a:	ec eb       	ldi	r30, 0xBC	; 188
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	8b 72       	andi	r24, 0x2B	; 43
     772:	84 6c       	ori	r24, 0xC4	; 196
     774:	80 83       	st	Z, r24
		break;
     776:	96 c1       	rjmp	.+812    	; 0xaa4 <__stack+0x1a5>
	case I2C_SRPSLAW_DATA_NACK:
		// Data has been returned but we (slave) send NACK instead
		if (tagI2C::slRecIdx < I2C_RECEIVEBUFFSIZE)
     778:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_ZN6tagI2C8slRecIdxE>
     77c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     780:	84 31       	cpi	r24, 0x14	; 20
     782:	91 05       	cpc	r25, r1
     784:	60 f4       	brcc	.+24     	; 0x79e <_ZN6tagI2C7I2C_ISREv+0x39c>
		{
			tagI2C::slRecBuff[tagI2C::slRecIdx] = TWDR;
     786:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     78a:	fc 01       	movw	r30, r24
     78c:	ea 5d       	subi	r30, 0xDA	; 218
     78e:	fe 4f       	sbci	r31, 0xFE	; 254
     790:	20 83       	st	Z, r18
			tagI2C::slRecIdx ++;
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     798:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZN6tagI2C8slRecIdxE>
     79c:	06 c0       	rjmp	.+12     	; 0x7aa <_ZN6tagI2C7I2C_ISREv+0x3a8>
		} else {
			tagI2C::slRecIdx = I2C_RECEIVEBUFFSIZE;
     79e:	84 e1       	ldi	r24, 0x14	; 20
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     7a6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZN6tagI2C8slRecIdxE>
		}
		if (tagI2C::SRDataRoutine)
     7aa:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <_ZN6tagI2C13SRDataRoutineE>
     7ae:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <_ZN6tagI2C13SRDataRoutineE+0x1>
     7b2:	30 97       	sbiw	r30, 0x00	; 0
     7b4:	19 f0       	breq	.+6      	; 0x7bc <_ZN6tagI2C7I2C_ISREv+0x3ba>
		{
			tagI2C::SRDataRoutine(TWDR);
     7b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7ba:	09 95       	icall
		}
		// Proceed to the not addressed mode but own address still can be recognize
		tagI2C::mode = FREE;
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR = (TWCR & 0x0F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     7c2:	ec eb       	ldi	r30, 0xBC	; 188
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	8b 70       	andi	r24, 0x0B	; 11
     7ca:	84 6c       	ori	r24, 0xC4	; 196
     7cc:	80 83       	st	Z, r24
		break;
     7ce:	6a c1       	rjmp	.+724    	; 0xaa4 <__stack+0x1a5>
	case I2C_SRPGENCALL_DATA_ACK:
		// Data from general call has been received and we acknowledge it
		if (tagI2C::slRecIdx < I2C_RECEIVEBUFFSIZE)
     7d0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_ZN6tagI2C8slRecIdxE>
     7d4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     7d8:	84 31       	cpi	r24, 0x14	; 20
     7da:	91 05       	cpc	r25, r1
     7dc:	60 f4       	brcc	.+24     	; 0x7f6 <_ZN6tagI2C7I2C_ISREv+0x3f4>
		{
			tagI2C::slRecBuff[tagI2C::slRecIdx] = TWDR;
     7de:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7e2:	fc 01       	movw	r30, r24
     7e4:	ea 5d       	subi	r30, 0xDA	; 218
     7e6:	fe 4f       	sbci	r31, 0xFE	; 254
     7e8:	20 83       	st	Z, r18
			tagI2C::slRecIdx ++;
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     7f0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZN6tagI2C8slRecIdxE>
     7f4:	06 c0       	rjmp	.+12     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		} else {
			tagI2C::slRecIdx = I2C_RECEIVEBUFFSIZE;
     7f6:	84 e1       	ldi	r24, 0x14	; 20
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     7fe:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZN6tagI2C8slRecIdxE>
		}
		// Proceed to receive next byte and send ACK for next byte
		TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     802:	ec eb       	ldi	r30, 0xBC	; 188
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	8b 72       	andi	r24, 0x2B	; 43
     80a:	84 6c       	ori	r24, 0xC4	; 196
     80c:	80 83       	st	Z, r24
		break;
     80e:	4a c1       	rjmp	.+660    	; 0xaa4 <__stack+0x1a5>
	case I2C_SRPGENCALL_DATA_NACK:
		// Data from general call has been received and we don't acknowledge it
		if (tagI2C::slRecIdx < I2C_RECEIVEBUFFSIZE)
     810:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_ZN6tagI2C8slRecIdxE>
     814:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     818:	84 31       	cpi	r24, 0x14	; 20
     81a:	91 05       	cpc	r25, r1
     81c:	60 f4       	brcc	.+24     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
		{
			tagI2C::slRecBuff[tagI2C::slRecIdx] = TWDR;
     81e:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     822:	fc 01       	movw	r30, r24
     824:	ea 5d       	subi	r30, 0xDA	; 218
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	20 83       	st	Z, r18
			tagI2C::slRecIdx ++;
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     830:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZN6tagI2C8slRecIdxE>
     834:	06 c0       	rjmp	.+12     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		} else {
			tagI2C::slRecIdx = I2C_RECEIVEBUFFSIZE;
     836:	84 e1       	ldi	r24, 0x14	; 20
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <_ZN6tagI2C8slRecIdxE+0x1>
     83e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZN6tagI2C8slRecIdxE>
		}
		// Proceed to the not addressed mode but own address still can be recognize
		tagI2C::mode = FREE;
     842:	88 e0       	ldi	r24, 0x08	; 8
     844:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR = (TWCR & 0x0F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     848:	ec eb       	ldi	r30, 0xBC	; 188
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8b 70       	andi	r24, 0x0B	; 11
     850:	84 6c       	ori	r24, 0xC4	; 196
     852:	80 83       	st	Z, r24
		break;
     854:	27 c1       	rjmp	.+590    	; 0xaa4 <__stack+0x1a5>
	case I2C_SR_STOP:
		// Repeated start or stop condition has been received while still addressed as slave
		// Proceed to the not addressed mode but own address still can be recognize
		tagI2C::mode = FREE;
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR = (TWCR & 0x0F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     85c:	ec eb       	ldi	r30, 0xBC	; 188
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	8b 70       	andi	r24, 0x0B	; 11
     864:	84 6c       	ori	r24, 0xC4	; 196
     866:	80 83       	st	Z, r24
		break;
     868:	1d c1       	rjmp	.+570    	; 0xaa4 <__stack+0x1a5>
	case I2C_STSLAR_ACK:
		// Our device has been addressed as slave transmitter and we acknowledged it
		// Proceed to ST Mode
		tagI2C::mode = ST_MODE;
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		// Load data to be transmitted
		if (tagI2C::slTrIdx > 1)
     870:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     874:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	91 05       	cpc	r25, r1
     87c:	48 f1       	brcs	.+82     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
		{
			TWDR = tagI2C::slTrBuff[0];
     87e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN6tagI2C8slTrBuffE>
     882:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			for (UCHAR iter=0; iter < tagI2C::slTrIdx-1; iter++)
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     88c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	42 2f       	mov	r20, r18
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	48 17       	cp	r20, r24
     898:	59 07       	cpc	r21, r25
     89a:	58 f4       	brcc	.+22     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
			{
				tagI2C::slTrBuff[iter] = tagI2C::slTrBuff[iter+1]; 
     89c:	ca 01       	movw	r24, r20
     89e:	fc 01       	movw	r30, r24
     8a0:	ef 5e       	subi	r30, 0xEF	; 239
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	30 81       	ld	r19, Z
     8a6:	fc 01       	movw	r30, r24
     8a8:	e0 5f       	subi	r30, 0xF0	; 240
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	30 83       	st	Z, r19
		tagI2C::mode = ST_MODE;
		// Load data to be transmitted
		if (tagI2C::slTrIdx > 1)
		{
			TWDR = tagI2C::slTrBuff[0];
			for (UCHAR iter=0; iter < tagI2C::slTrIdx-1; iter++)
     8ae:	2f 5f       	subi	r18, 0xFF	; 255
     8b0:	eb cf       	rjmp	.-42     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
			{
				tagI2C::slTrBuff[iter] = tagI2C::slTrBuff[iter+1]; 
			}
			tagI2C::slTrBuff[tagI2C::slTrIdx-1] = 0;
     8b2:	fc 01       	movw	r30, r24
     8b4:	e0 5f       	subi	r30, 0xF0	; 240
     8b6:	fe 4f       	sbci	r31, 0xFE	; 254
     8b8:	10 82       	st	Z, r1
			tagI2C::slTrIdx = tagI2C::slTrIdx - 1;
     8ba:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     8be:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			
			// Start transmitting
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     8c2:	ec eb       	ldi	r30, 0xBC	; 188
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	8b 72       	andi	r24, 0x2B	; 43
     8ca:	84 6c       	ori	r24, 0xC4	; 196
     8cc:	80 83       	st	Z, r24
     8ce:	ea c0       	rjmp	.+468    	; 0xaa4 <__stack+0x1a5>
		} else if (tagI2C::slTrIdx == 1) {
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	b1 f4       	brne	.+44     	; 0x900 <__stack+0x1>
			TWDR = tagI2C::slTrBuff[0];
     8d4:	e0 e1       	ldi	r30, 0x10	; 16
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	80 81       	ld	r24, Z
     8da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			tagI2C::slTrBuff[0] = 0;
     8de:	10 82       	st	Z, r1
			tagI2C::slTrIdx = tagI2C::slTrIdx - 1;
     8e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     8e4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     8ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			// Start transmitting and NACK should be received
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEN);
     8f2:	ec eb       	ldi	r30, 0xBC	; 188
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	8b 72       	andi	r24, 0x2B	; 43
     8fa:	84 68       	ori	r24, 0x84	; 132
     8fc:	80 83       	st	Z, r24
     8fe:	d2 c0       	rjmp	.+420    	; 0xaa4 <__stack+0x1a5>
		} else {
			// In here all data has been transmitted
			TWDR = 0;
     900:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEN);
     904:	ec eb       	ldi	r30, 0xBC	; 188
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	8b 72       	andi	r24, 0x2B	; 43
     90c:	84 68       	ori	r24, 0x84	; 132
     90e:	80 83       	st	Z, r24
     910:	c9 c0       	rjmp	.+402    	; 0xaa4 <__stack+0x1a5>
		break;
	case I2C_STARBL_SLAR_ACK:
		// Our device has been addressed as slave transmitter and we acknowledged it
		// although our device has lost on seizing control over the bus
		// Proceed to ST Mode
		tagI2C::mode = ST_MODE;
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		// Load data to be transmitted
		if (tagI2C::slTrIdx > 1)
     918:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     91c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     920:	82 30       	cpi	r24, 0x02	; 2
     922:	91 05       	cpc	r25, r1
     924:	48 f1       	brcs	.+82     	; 0x978 <__stack+0x79>
		{
			TWDR = tagI2C::slTrBuff[0];
     926:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN6tagI2C8slTrBuffE>
     92a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			for (UCHAR iter=0; iter < tagI2C::slTrIdx-1; iter++)
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     934:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	42 2f       	mov	r20, r18
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	48 17       	cp	r20, r24
     940:	59 07       	cpc	r21, r25
     942:	58 f4       	brcc	.+22     	; 0x95a <__stack+0x5b>
			{
				tagI2C::slTrBuff[iter] = tagI2C::slTrBuff[iter+1];
     944:	ca 01       	movw	r24, r20
     946:	fc 01       	movw	r30, r24
     948:	ef 5e       	subi	r30, 0xEF	; 239
     94a:	fe 4f       	sbci	r31, 0xFE	; 254
     94c:	30 81       	ld	r19, Z
     94e:	fc 01       	movw	r30, r24
     950:	e0 5f       	subi	r30, 0xF0	; 240
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	30 83       	st	Z, r19
		tagI2C::mode = ST_MODE;
		// Load data to be transmitted
		if (tagI2C::slTrIdx > 1)
		{
			TWDR = tagI2C::slTrBuff[0];
			for (UCHAR iter=0; iter < tagI2C::slTrIdx-1; iter++)
     956:	2f 5f       	subi	r18, 0xFF	; 255
     958:	eb cf       	rjmp	.-42     	; 0x930 <__stack+0x31>
			{
				tagI2C::slTrBuff[iter] = tagI2C::slTrBuff[iter+1];
			}
			tagI2C::slTrBuff[tagI2C::slTrIdx-1] = 0;
     95a:	fc 01       	movw	r30, r24
     95c:	e0 5f       	subi	r30, 0xF0	; 240
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	10 82       	st	Z, r1
			tagI2C::slTrIdx = tagI2C::slTrIdx - 1;
     962:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     966:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			
			// Start transmitting
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     96a:	ec eb       	ldi	r30, 0xBC	; 188
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	8b 72       	andi	r24, 0x2B	; 43
     972:	84 6c       	ori	r24, 0xC4	; 196
     974:	80 83       	st	Z, r24
     976:	96 c0       	rjmp	.+300    	; 0xaa4 <__stack+0x1a5>
		} else if (tagI2C::slTrIdx == 1) {
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	b1 f4       	brne	.+44     	; 0x9a8 <__stack+0xa9>
			TWDR = tagI2C::slTrBuff[0];
     97c:	e0 e1       	ldi	r30, 0x10	; 16
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	80 81       	ld	r24, Z
     982:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			tagI2C::slTrBuff[0] = 0;
     986:	10 82       	st	Z, r1
			tagI2C::slTrIdx = tagI2C::slTrIdx - 1;
     988:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     98c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     996:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			// Start transmitting and NACK should be received
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEN);
     99a:	ec eb       	ldi	r30, 0xBC	; 188
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	8b 72       	andi	r24, 0x2B	; 43
     9a2:	84 68       	ori	r24, 0x84	; 132
     9a4:	80 83       	st	Z, r24
     9a6:	7e c0       	rjmp	.+252    	; 0xaa4 <__stack+0x1a5>
		} else {
			// In here all data has been transmitted
			TWDR = 0;
     9a8:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEN);
     9ac:	ec eb       	ldi	r30, 0xBC	; 188
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	8b 72       	andi	r24, 0x2B	; 43
     9b4:	84 68       	ori	r24, 0x84	; 132
     9b6:	80 83       	st	Z, r24
     9b8:	75 c0       	rjmp	.+234    	; 0xaa4 <__stack+0x1a5>
		}
		break;
	case I2C_STDATA_ACK:
		// In here, our data has been transmitted and master has been acknowledge it
		// Load data to be transmitted
		if (tagI2C::slTrIdx > 1)
     9ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     9be:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	91 05       	cpc	r25, r1
     9c6:	48 f1       	brcs	.+82     	; 0xa1a <__stack+0x11b>
		{
			TWDR = tagI2C::slTrBuff[0];
     9c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN6tagI2C8slTrBuffE>
     9cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			for (UCHAR iter=0; iter < tagI2C::slTrIdx-1; iter++)
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     9d6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	42 2f       	mov	r20, r18
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	48 17       	cp	r20, r24
     9e2:	59 07       	cpc	r21, r25
     9e4:	58 f4       	brcc	.+22     	; 0x9fc <__stack+0xfd>
			{
				tagI2C::slTrBuff[iter] = tagI2C::slTrBuff[iter+1];
     9e6:	ca 01       	movw	r24, r20
     9e8:	fc 01       	movw	r30, r24
     9ea:	ef 5e       	subi	r30, 0xEF	; 239
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	30 81       	ld	r19, Z
     9f0:	fc 01       	movw	r30, r24
     9f2:	e0 5f       	subi	r30, 0xF0	; 240
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	30 83       	st	Z, r19
		// In here, our data has been transmitted and master has been acknowledge it
		// Load data to be transmitted
		if (tagI2C::slTrIdx > 1)
		{
			TWDR = tagI2C::slTrBuff[0];
			for (UCHAR iter=0; iter < tagI2C::slTrIdx-1; iter++)
     9f8:	2f 5f       	subi	r18, 0xFF	; 255
     9fa:	eb cf       	rjmp	.-42     	; 0x9d2 <__stack+0xd3>
			{
				tagI2C::slTrBuff[iter] = tagI2C::slTrBuff[iter+1];
			}
			tagI2C::slTrBuff[tagI2C::slTrIdx-1] = 0;
     9fc:	fc 01       	movw	r30, r24
     9fe:	e0 5f       	subi	r30, 0xF0	; 240
     a00:	fe 4f       	sbci	r31, 0xFE	; 254
     a02:	10 82       	st	Z, r1
			tagI2C::slTrIdx = tagI2C::slTrIdx - 1;
     a04:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     a08:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			
			// Start transmitting
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     a0c:	ec eb       	ldi	r30, 0xBC	; 188
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	8b 72       	andi	r24, 0x2B	; 43
     a14:	84 6c       	ori	r24, 0xC4	; 196
     a16:	80 83       	st	Z, r24
     a18:	45 c0       	rjmp	.+138    	; 0xaa4 <__stack+0x1a5>
		} else if (tagI2C::slTrIdx == 1) {
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	b1 f4       	brne	.+44     	; 0xa4a <__stack+0x14b>
			TWDR = tagI2C::slTrBuff[0];
     a1e:	e0 e1       	ldi	r30, 0x10	; 16
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	80 81       	ld	r24, Z
     a24:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			tagI2C::slTrBuff[0] = 0;
     a28:	10 82       	st	Z, r1
			tagI2C::slTrIdx = tagI2C::slTrIdx - 1;
     a2a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     a2e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     a38:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			// Start transmitting and NACK should be received
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEN);
     a3c:	ec eb       	ldi	r30, 0xBC	; 188
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	8b 72       	andi	r24, 0x2B	; 43
     a44:	84 68       	ori	r24, 0x84	; 132
     a46:	80 83       	st	Z, r24
     a48:	2d c0       	rjmp	.+90     	; 0xaa4 <__stack+0x1a5>
		} else {
			// In here all data has been transmitted
			TWDR = 0;
     a4a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR = (TWCR & 0x2F) | _b(TWINT) | _b(TWEN);
     a4e:	ec eb       	ldi	r30, 0xBC	; 188
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	8b 72       	andi	r24, 0x2B	; 43
     a56:	84 68       	ori	r24, 0x84	; 132
     a58:	80 83       	st	Z, r24
     a5a:	24 c0       	rjmp	.+72     	; 0xaa4 <__stack+0x1a5>
		}
		break;
	case I2C_STDATA_NACK:
		// Our byte has been transmitted but master return NACK
		// Proceed to end transmission
		tagI2C::mode = FREE;
     a5c:	88 e0       	ldi	r24, 0x08	; 8
     a5e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR = (TWCR & 0x0F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     a62:	ec eb       	ldi	r30, 0xBC	; 188
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	8b 70       	andi	r24, 0x0B	; 11
     a6a:	84 6c       	ori	r24, 0xC4	; 196
     a6c:	80 83       	st	Z, r24
		break;
     a6e:	1a c0       	rjmp	.+52     	; 0xaa4 <__stack+0x1a5>
	case I2C_STLASTDATA_ACK:
		// We have sent last byte but master sent us ACK instead
		// Proceed to end transmission
		TWDR = 0;
     a70:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR = (TWCR & 0x0F) | _b(TWINT) | _b(TWEA) | _b(TWEN);
     a74:	ec eb       	ldi	r30, 0xBC	; 188
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	8b 70       	andi	r24, 0x0B	; 11
     a7c:	84 6c       	ori	r24, 0xC4	; 196
     a7e:	80 83       	st	Z, r24
     a80:	80 83       	st	Z, r24
		break;
     a82:	10 c0       	rjmp	.+32     	; 0xaa4 <__stack+0x1a5>
	default:
		if (tagI2C::ExtProc)
     a84:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <_ZN6tagI2C7ExtProcE>
     a88:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <_ZN6tagI2C7ExtProcE+0x1>
     a8c:	30 97       	sbiw	r30, 0x00	; 0
     a8e:	09 f0       	breq	.+2      	; 0xa92 <__stack+0x193>
		{
			tagI2C::ExtProc(tagI2C::status);	
     a90:	09 95       	icall
		}
		// Make sure that TWINT is cleared
		if (TWCR & _b(TWINT))
     a92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a96:	88 23       	and	r24, r24
     a98:	2c f4       	brge	.+10     	; 0xaa4 <__stack+0x1a5>
		{
			// Clear the TWINT bit by writing 1 to it
			TWCR = TWCR | _b(TWINT);
     a9a:	ec eb       	ldi	r30, 0xBC	; 188
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	80 68       	ori	r24, 0x80	; 128
     aa2:	80 83       	st	Z, r24
		}
		break;
	}
}
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <__vector_24>:

ISR(TWI_vect)
{
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
	// Interrupt Service Routine for I2C interrupt flag
	tagI2C::I2C_ISR();
     acc:	0e 94 01 02 	call	0x402	; 0x402 <_ZN6tagI2C7I2C_ISREv>
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <_Z41__static_initialization_and_destruction_0ii>:
}

ISR(USART_TX_vect)
{
	myRF.ISR_transmitting();
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	41 f4       	brne	.+16     	; 0xb06 <_Z41__static_initialization_and_destruction_0ii+0x14>
     af6:	6f 3f       	cpi	r22, 0xFF	; 255
     af8:	7f 4f       	sbci	r23, 0xFF	; 255
     afa:	29 f4       	brne	.+10     	; 0xb06 <_Z41__static_initialization_and_destruction_0ii+0x14>
{
	UINT	uiData[3];
	char	cData[6];
} I2CRFTestFormat;

RFData		myRF(0x40);
     afc:	60 e4       	ldi	r22, 0x40	; 64
     afe:	8d e5       	ldi	r24, 0x5D	; 93
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 78 06 	call	0xcf0	; 0xcf0 <_ZN6RFDataC1Eh>
     b06:	08 95       	ret

00000b08 <_Z5setupv>:
#define				ESP_ADR			0x41
I2CRFTestFormat		Data2I2C;

void setup(void)
{
	totalMsg.uiNum	= 0;
     b08:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <totalMsg+0x1>
     b0c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <totalMsg>
	buttonState		= 0;
     b10:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <buttonState>
	receivedMsg		= 0;
     b14:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <receivedMsg+0x1>
     b18:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <receivedMsg>
	lostMsg			= 0;
     b1c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <lostMsg+0x1>
     b20:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <lostMsg>
	corruptedMsg	= 0;
     b24:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <corruptedMsg+0x1>
     b28:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <corruptedMsg>
	// Initiating peripherals (serial and two-wire communication)
	Serial.init(2400);
     b2c:	60 e6       	ldi	r22, 0x60	; 96
     b2e:	79 e0       	ldi	r23, 0x09	; 9
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 41 06 	call	0xc82	; 0xc82 <_ZN9tagSerial4initEm>
	Serial.write("Hello World!");
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN9tagSerial5writeEPc>
	I2C.begin(100000, 0x40);
     b40:	40 e4       	ldi	r20, 0x40	; 64
     b42:	60 ea       	ldi	r22, 0xA0	; 160
     b44:	76 e8       	ldi	r23, 0x86	; 134
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 20 01 	call	0x240	; 0x240 <_ZN6tagI2C5beginEmh>
	sei();
     b4e:	78 94       	sei
     b50:	08 95       	ret

00000b52 <main>:
}
int main(void)
{
	setup();
     b52:	0e 94 84 05 	call	0xb08	; 0xb08 <_Z5setupv>
    /* Replace with your application code */
    while (1) 
    {
		/* Check whether there is received message from RF transmitter */
		msg_state = myRF.RX_return_data(totalMsg.bytes, &buttonState);
     b56:	4a e5       	ldi	r20, 0x5A	; 90
     b58:	51 e0       	ldi	r21, 0x01	; 1
     b5a:	6b e5       	ldi	r22, 0x5B	; 91
     b5c:	71 e0       	ldi	r23, 0x01	; 1
     b5e:	8d e5       	ldi	r24, 0x5D	; 93
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN6RFData14RX_return_dataEPhS0_>
     b66:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <msg_state>
		if (msg_state > 0)
     b6a:	88 23       	and	r24, r24
     b6c:	a1 f3       	breq	.-24     	; 0xb56 <main+0x4>
		{
			/* Evaluate the data */
			receivedMsg ++;
     b6e:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <receivedMsg>
     b72:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <receivedMsg+0x1>
     b76:	2f 5f       	subi	r18, 0xFF	; 255
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <receivedMsg+0x1>
     b7e:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <receivedMsg>
			lostMsg = totalMsg.uiNum - receivedMsg;
     b82:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <totalMsg>
     b86:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <totalMsg+0x1>
     b8a:	ba 01       	movw	r22, r20
     b8c:	62 1b       	sub	r22, r18
     b8e:	73 0b       	sbc	r23, r19
     b90:	9b 01       	movw	r18, r22
     b92:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <lostMsg+0x1>
     b96:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <lostMsg>
			// Check if the data is corrupted
			if (msg_state == 0x80)
     b9a:	80 38       	cpi	r24, 0x80	; 128
     b9c:	49 f4       	brne	.+18     	; 0xbb0 <main+0x5e>
			{
				corruptedMsg ++;
     b9e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <corruptedMsg>
     ba2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <corruptedMsg+0x1>
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <corruptedMsg+0x1>
     bac:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <corruptedMsg>
			}
			/* Send data to ESP32 via I2C / Two-Wire Protocol */
			Data2I2C.uiData[0] = totalMsg.uiNum;
     bb0:	ed e4       	ldi	r30, 0x4D	; 77
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	51 83       	std	Z+1, r21	; 0x01
     bb6:	40 83       	st	Z, r20
			Data2I2C.uiData[1] = lostMsg;
     bb8:	33 83       	std	Z+3, r19	; 0x03
     bba:	22 83       	std	Z+2, r18	; 0x02
			Data2I2C.uiData[2] = corruptedMsg;
     bbc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <corruptedMsg>
     bc0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <corruptedMsg+0x1>
     bc4:	95 83       	std	Z+5, r25	; 0x05
     bc6:	84 83       	std	Z+4, r24	; 0x04
			while (!I2C.MTransmit(Data2I2C.cData, BUFFER_SIZE, ESP_ADR));
     bc8:	41 e4       	ldi	r20, 0x41	; 65
     bca:	66 e0       	ldi	r22, 0x06	; 6
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	8d e4       	ldi	r24, 0x4D	; 77
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN6tagI2C9MTransmitEPcjh>
     bd6:	88 23       	and	r24, r24
     bd8:	b9 f3       	breq	.-18     	; 0xbc8 <main+0x76>
     bda:	bd cf       	rjmp	.-134    	; 0xb56 <main+0x4>

00000bdc <__vector_18>:
		}
	}
}

ISR(USART_RX_vect)
{
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
	/*
	Receive complete interrupt. RFData.ISR_receiving()
	must be executed in this interrupt.
	*/
	myRF.ISR_receiving();
     bfe:	8d e5       	ldi	r24, 0x5D	; 93
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN6RFData13ISR_receivingEv>
}
     c06:	ff 91       	pop	r31
     c08:	ef 91       	pop	r30
     c0a:	bf 91       	pop	r27
     c0c:	af 91       	pop	r26
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	7f 91       	pop	r23
     c14:	6f 91       	pop	r22
     c16:	5f 91       	pop	r21
     c18:	4f 91       	pop	r20
     c1a:	3f 91       	pop	r19
     c1c:	2f 91       	pop	r18
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_20>:

ISR(USART_TX_vect)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
	myRF.ISR_transmitting();
     c4a:	8d e5       	ldi	r24, 0x5D	; 93
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN6RFData16ISR_transmittingEv>
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <_GLOBAL__sub_I_myRF>:
     c74:	6f ef       	ldi	r22, 0xFF	; 255
     c76:	7f ef       	ldi	r23, 0xFF	; 255
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_Z41__static_initialization_and_destruction_0ii>
     c80:	08 95       	ret

00000c82 <_ZN9tagSerial4initEm>:
		tagSerial::write(IDLING_BYTE);
		return 1;
	} else {
		return 0;
	}
}
     c82:	9b 01       	movw	r18, r22
     c84:	ac 01       	movw	r20, r24
     c86:	60 e4       	ldi	r22, 0x40	; 64
     c88:	72 e4       	ldi	r23, 0x42	; 66
     c8a:	8f e0       	ldi	r24, 0x0F	; 15
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 07 08 	call	0x100e	; 0x100e <__udivmodsi4>
     c92:	da 01       	movw	r26, r20
     c94:	c9 01       	movw	r24, r18
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	a1 09       	sbc	r26, r1
     c9a:	b1 09       	sbc	r27, r1
     c9c:	89 2f       	mov	r24, r25
     c9e:	9a 2f       	mov	r25, r26
     ca0:	ab 2f       	mov	r26, r27
     ca2:	bb 27       	eor	r27, r27
     ca4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     ca8:	21 50       	subi	r18, 0x01	; 1
     caa:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     cae:	88 ed       	ldi	r24, 0xD8	; 216
     cb0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     cba:	08 95       	ret

00000cbc <_ZN9tagSerial5writeEc>:
     cbc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     cc0:	95 ff       	sbrs	r25, 5
     cc2:	fc cf       	rjmp	.-8      	; 0xcbc <_ZN9tagSerial5writeEc>
     cc4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     cc8:	08 95       	ret

00000cca <_ZN9tagSerial5writeEPc>:
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	8c 01       	movw	r16, r24
     cd2:	c0 e0       	ldi	r28, 0x00	; 0
     cd4:	f8 01       	movw	r30, r16
     cd6:	ec 0f       	add	r30, r28
     cd8:	f1 1d       	adc	r31, r1
     cda:	80 81       	ld	r24, Z
     cdc:	88 23       	and	r24, r24
     cde:	21 f0       	breq	.+8      	; 0xce8 <_ZN9tagSerial5writeEPc+0x1e>
     ce0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN9tagSerial5writeEc>
     ce4:	cf 5f       	subi	r28, 0xFF	; 255
     ce6:	f6 cf       	rjmp	.-20     	; 0xcd4 <_ZN9tagSerial5writeEPc+0xa>
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	08 95       	ret

00000cf0 <_ZN6RFDataC1Eh>:
     cf0:	fc 01       	movw	r30, r24
     cf2:	60 8f       	std	Z+24, r22	; 0x18
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	80 83       	st	Z, r24
     cf8:	81 83       	std	Z+1, r24	; 0x01
     cfa:	11 8a       	std	Z+17, r1	; 0x11
     cfc:	10 8a       	std	Z+16, r1	; 0x10
     cfe:	13 8a       	std	Z+19, r1	; 0x13
     d00:	12 8a       	std	Z+18, r1	; 0x12
     d02:	14 8a       	std	Z+20, r1	; 0x14
     d04:	08 95       	ret

00000d06 <_ZN6RFData15parityGeneratorEPh>:
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <_ZN6RFData15parityGeneratorEPh+0xa>
     d10:	00 d0       	rcall	.+0      	; 0xd12 <_ZN6RFData15parityGeneratorEPh+0xc>
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	8c 01       	movw	r16, r24
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	84 30       	cpi	r24, 0x04	; 4
     d1e:	91 05       	cpc	r25, r1
     d20:	4c f4       	brge	.+18     	; 0xd34 <_ZN6RFData15parityGeneratorEPh+0x2e>
     d22:	e1 e0       	ldi	r30, 0x01	; 1
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	e8 0f       	add	r30, r24
     d2c:	f9 1f       	adc	r31, r25
     d2e:	10 82       	st	Z, r1
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	f4 cf       	rjmp	.-24     	; 0xd1c <_ZN6RFData15parityGeneratorEPh+0x16>
     d34:	e0 e0       	ldi	r30, 0x00	; 0
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	e8 30       	cpi	r30, 0x08	; 8
     d3a:	f1 05       	cpc	r31, r1
     d3c:	0c f0       	brlt	.+2      	; 0xd40 <_ZN6RFData15parityGeneratorEPh+0x3a>
     d3e:	47 c0       	rjmp	.+142    	; 0xdce <_ZN6RFData15parityGeneratorEPh+0xc8>
     d40:	49 81       	ldd	r20, Y+1	; 0x01
     d42:	d8 01       	movw	r26, r16
     d44:	58 96       	adiw	r26, 0x18	; 24
     d46:	9c 91       	ld	r25, X
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	0e 2e       	mov	r0, r30
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <_ZN6RFData15parityGeneratorEPh+0x4e>
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <_ZN6RFData15parityGeneratorEPh+0x4a>
     d58:	89 2f       	mov	r24, r25
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	82 23       	and	r24, r18
     d5e:	93 23       	and	r25, r19
     d60:	0e 2e       	mov	r0, r30
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <_ZN6RFData15parityGeneratorEPh+0x62>
     d64:	95 95       	asr	r25
     d66:	87 95       	ror	r24
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <_ZN6RFData15parityGeneratorEPh+0x5e>
     d6c:	84 27       	eor	r24, r20
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	4a 81       	ldd	r20, Y+2	; 0x02
     d72:	db 01       	movw	r26, r22
     d74:	9c 91       	ld	r25, X
     d76:	89 2f       	mov	r24, r25
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	82 23       	and	r24, r18
     d7c:	93 23       	and	r25, r19
     d7e:	0e 2e       	mov	r0, r30
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <_ZN6RFData15parityGeneratorEPh+0x80>
     d82:	95 95       	asr	r25
     d84:	87 95       	ror	r24
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <_ZN6RFData15parityGeneratorEPh+0x7c>
     d8a:	84 27       	eor	r24, r20
     d8c:	8a 83       	std	Y+2, r24	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	8c 91       	ld	r24, X
     d94:	11 97       	sbiw	r26, 0x01	; 1
     d96:	48 2f       	mov	r20, r24
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	42 23       	and	r20, r18
     d9c:	53 23       	and	r21, r19
     d9e:	0e 2e       	mov	r0, r30
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <_ZN6RFData15parityGeneratorEPh+0xa0>
     da2:	55 95       	asr	r21
     da4:	47 95       	ror	r20
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <_ZN6RFData15parityGeneratorEPh+0x9c>
     daa:	49 27       	eor	r20, r25
     dac:	4b 83       	std	Y+3, r20	; 0x03
     dae:	4c 81       	ldd	r20, Y+4	; 0x04
     db0:	12 96       	adiw	r26, 0x02	; 2
     db2:	8c 91       	ld	r24, X
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	28 23       	and	r18, r24
     db8:	39 23       	and	r19, r25
     dba:	0e 2e       	mov	r0, r30
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <_ZN6RFData15parityGeneratorEPh+0xbc>
     dbe:	35 95       	asr	r19
     dc0:	27 95       	ror	r18
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <_ZN6RFData15parityGeneratorEPh+0xb8>
     dc6:	24 27       	eor	r18, r20
     dc8:	2c 83       	std	Y+4, r18	; 0x04
     dca:	31 96       	adiw	r30, 0x01	; 1
     dcc:	b5 cf       	rjmp	.-150    	; 0xd38 <_ZN6RFData15parityGeneratorEPh+0x32>
     dce:	49 81       	ldd	r20, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	29 2f       	mov	r18, r25
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	22 0f       	add	r18, r18
     dd8:	33 1f       	adc	r19, r19
     dda:	42 2b       	or	r20, r18
     ddc:	9b 81       	ldd	r25, Y+3	; 0x03
     dde:	29 2f       	mov	r18, r25
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	89 2f       	mov	r24, r25
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	24 2b       	or	r18, r20
     dfe:	82 2b       	or	r24, r18
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	20 95       	com	r18
     e06:	30 95       	com	r19
     e08:	22 95       	swap	r18
     e0a:	32 95       	swap	r19
     e0c:	30 7f       	andi	r19, 0xF0	; 240
     e0e:	32 27       	eor	r19, r18
     e10:	20 7f       	andi	r18, 0xF0	; 240
     e12:	32 27       	eor	r19, r18
     e14:	82 2b       	or	r24, r18
     e16:	fb 01       	movw	r30, r22
     e18:	84 83       	std	Z+4, r24	; 0x04
     e1a:	d8 01       	movw	r26, r16
     e1c:	58 96       	adiw	r26, 0x18	; 24
     e1e:	3c 91       	ld	r19, X
     e20:	80 81       	ld	r24, Z
     e22:	21 81       	ldd	r18, Z+1	; 0x01
     e24:	92 81       	ldd	r25, Z+2	; 0x02
     e26:	83 27       	eor	r24, r19
     e28:	82 27       	eor	r24, r18
     e2a:	89 27       	eor	r24, r25
     e2c:	83 83       	std	Z+3, r24	; 0x03
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <_ZN6RFData16ISR_transmittingEv>:

void RFData::ISR_transmitting(void)
{
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ec 01       	movw	r28, r24
	switch(this->_tx_status)
     e46:	88 81       	ld	r24, Y
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	69 f0       	breq	.+26     	; 0xe66 <_ZN6RFData16ISR_transmittingEv+0x26>
     e4c:	18 f0       	brcs	.+6      	; 0xe54 <_ZN6RFData16ISR_transmittingEv+0x14>
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	e9 f0       	breq	.+58     	; 0xe8c <_ZN6RFData16ISR_transmittingEv+0x4c>
     e52:	25 c0       	rjmp	.+74     	; 0xe9e <_ZN6RFData16ISR_transmittingEv+0x5e>
	{
	case READY:
		// change the status
		this->_tx_status = BUSY;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	88 83       	st	Y, r24
		// Initiating other transmit parameter
		this->_tx_pointer = 0;
     e58:	19 8a       	std	Y+17, r1	; 0x11
     e5a:	18 8a       	std	Y+16, r1	; 0x10
		this->_tx_iddlingcounter = 0;
     e5c:	1c 8a       	std	Y+20, r1	; 0x14
		// Send start byte to the target device
		tagSerial::write(this->_startbyte_adr);
     e5e:	88 8d       	ldd	r24, Y+24	; 0x18
     e60:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN9tagSerial5writeEc>
		break;
     e64:	1c c0       	rjmp	.+56     	; 0xe9e <_ZN6RFData16ISR_transmittingEv+0x5e>
	case BUSY:
		// Sending the message
		tagSerial::write(this->_tx_buff[this->_tx_pointer]);
     e66:	e8 89       	ldd	r30, Y+16	; 0x10
     e68:	f9 89       	ldd	r31, Y+17	; 0x11
     e6a:	ec 0f       	add	r30, r28
     e6c:	fd 1f       	adc	r31, r29
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN9tagSerial5writeEc>
		this->_tx_pointer++;
     e74:	88 89       	ldd	r24, Y+16	; 0x10
     e76:	99 89       	ldd	r25, Y+17	; 0x11
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	99 8b       	std	Y+17, r25	; 0x11
     e7c:	88 8b       	std	Y+16, r24	; 0x10
		if (this->_tx_pointer >= CWSIZE)
     e7e:	05 97       	sbiw	r24, 0x05	; 5
     e80:	70 f0       	brcs	.+28     	; 0xe9e <_ZN6RFData16ISR_transmittingEv+0x5e>
		{
			this->_tx_pointer = 0;
     e82:	19 8a       	std	Y+17, r1	; 0x11
     e84:	18 8a       	std	Y+16, r1	; 0x10
			this->_tx_status = EMPTY;
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	88 83       	st	Y, r24
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <_ZN6RFData16ISR_transmittingEv+0x5e>
		}
		break;
	case EMPTY:
		// Sending idling byte
		if (this->_tx_iddlingcounter < 4)
     e8c:	8c 89       	ldd	r24, Y+20	; 0x14
     e8e:	84 30       	cpi	r24, 0x04	; 4
     e90:	30 f4       	brcc	.+12     	; 0xe9e <_ZN6RFData16ISR_transmittingEv+0x5e>
		{
			tagSerial::write(IDLING_BYTE);
     e92:	88 e5       	ldi	r24, 0x58	; 88
     e94:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN9tagSerial5writeEc>
			this->_tx_iddlingcounter++;
     e98:	8c 89       	ldd	r24, Y+20	; 0x14
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	8c 8b       	std	Y+20, r24	; 0x14
		}
		break;
	}
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <_ZN6RFData13RXDefaultDataEv>:

void RFData::RXDefaultData(void)
{
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
	if (this->_rx_status != READY)
     ea8:	fc 01       	movw	r30, r24
     eaa:	21 81       	ldd	r18, Z+1	; 0x01
     eac:	22 23       	and	r18, r18
     eae:	71 f0       	breq	.+28     	; 0xecc <_ZN6RFData13RXDefaultDataEv+0x28>
     eb0:	ec 01       	movw	r28, r24
	{
		this->_rx_pointer			= 0;
     eb2:	13 8a       	std	Z+19, r1	; 0x13
     eb4:	12 8a       	std	Z+18, r1	; 0x12
		this->_rx_buff[XDATA]		= 128;
     eb6:	80 e8       	ldi	r24, 0x80	; 128
     eb8:	87 83       	std	Z+7, r24	; 0x07
		this->_rx_buff[YDATA]		= 128;
     eba:	80 87       	std	Z+8, r24	; 0x08
		this->_rx_buff[BUTTONDATA]	= 0x00;
     ebc:	11 86       	std	Z+9, r1	; 0x09
		this->parityGenerator(this->_rx_buff);
     ebe:	bf 01       	movw	r22, r30
     ec0:	69 5f       	subi	r22, 0xF9	; 249
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	cf 01       	movw	r24, r30
     ec6:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN6RFData15parityGeneratorEPh>
		
		// Data ready to be used
		this->_rx_status = READY;
     eca:	19 82       	std	Y+1, r1	; 0x01
	}
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <_ZN6RFData13ISR_receivingEv>:

void RFData::ISR_receiving(void)
{
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
	// Receive the incoming msg first into this->_dummy
	// So that the receive buffer on hardware will be empty
	if (UCSR0A & (1 << FE0))
     ed8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     edc:	84 ff       	sbrs	r24, 4
     ede:	22 c0       	rjmp	.+68     	; 0xf24 <_ZN6RFData13ISR_receivingEv+0x52>
	{
		// Frame error detected.
		switch(this->_rx_status)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	61 f0       	breq	.+24     	; 0xefe <_ZN6RFData13ISR_receivingEv+0x2c>
     ee6:	b0 f0       	brcs	.+44     	; 0xf14 <_ZN6RFData13ISR_receivingEv+0x42>
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	19 f5       	brne	.+70     	; 0xf32 <_ZN6RFData13ISR_receivingEv+0x60>
		{
			case EMPTY:
				// Check the parity error
				this->_parity_dummy = (UCSR0A & (1 << UPE0));
     eec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ef0:	84 70       	andi	r24, 0x04	; 4
     ef2:	8e 8b       	std	Y+22, r24	; 0x16
				// Read receive buffer register and turn the incoming byte as IDLING_BYTE
				this->_dummy = UDR0;
     ef4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				this->_dummy = IDLING_BYTE;
     ef8:	88 e5       	ldi	r24, 0x58	; 88
     efa:	8f 8b       	std	Y+23, r24	; 0x17
				// With this, we hope we don't come to false START_BYTE
				break;
     efc:	1a c0       	rjmp	.+52     	; 0xf32 <_ZN6RFData13ISR_receivingEv+0x60>
			case BUSY:
				// Check the parity error
				this->_parity_dummy = (UCSR0A & (1 << UPE0));
     efe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f02:	84 70       	andi	r24, 0x04	; 4
     f04:	8e 8b       	std	Y+22, r24	; 0x16
				// error detected, ignored data and proceed to change msg as default
				this->_dummy = UDR0;
     f06:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f0a:	8f 8b       	std	Y+23, r24	; 0x17
				this->RXDefaultData();
     f0c:	ce 01       	movw	r24, r28
     f0e:	0e 94 52 07 	call	0xea4	; 0xea4 <_ZN6RFData13RXDefaultDataEv>
				break;
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <_ZN6RFData13ISR_receivingEv+0x60>
			case READY:
				// Ignore the incoming data
				this->_parity_dummy = (UCSR0A & (1 << UPE0));
     f14:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f18:	84 70       	andi	r24, 0x04	; 4
     f1a:	8e 8b       	std	Y+22, r24	; 0x16
				this->_dummy = UDR0;
     f1c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f20:	8f 8b       	std	Y+23, r24	; 0x17
				break;
     f22:	07 c0       	rjmp	.+14     	; 0xf32 <_ZN6RFData13ISR_receivingEv+0x60>
		}
	}
	else {
		this->_parity_dummy = (UCSR0A & (1 << UPE0));
     f24:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f28:	84 70       	andi	r24, 0x04	; 4
     f2a:	8e 8b       	std	Y+22, r24	; 0x16
		this->_dummy = UDR0;
     f2c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f30:	8f 8b       	std	Y+23, r24	; 0x17
	}
	
	// This below step depend on incoming msg char and _rx_status
	switch (this->_rx_status)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	79 f0       	breq	.+30     	; 0xf56 <_ZN6RFData13ISR_receivingEv+0x84>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	41 f5       	brne	.+80     	; 0xf8c <_ZN6RFData13ISR_receivingEv+0xba>
	{
	case EMPTY:
		if ((this->_dummy == this->_startbyte_adr) && (this->_parity_dummy == 0))
     f3c:	9f 89       	ldd	r25, Y+23	; 0x17
     f3e:	88 8d       	ldd	r24, Y+24	; 0x18
     f40:	98 13       	cpse	r25, r24
     f42:	24 c0       	rjmp	.+72     	; 0xf8c <_ZN6RFData13ISR_receivingEv+0xba>
     f44:	8e 89       	ldd	r24, Y+22	; 0x16
     f46:	81 11       	cpse	r24, r1
     f48:	21 c0       	rjmp	.+66     	; 0xf8c <_ZN6RFData13ISR_receivingEv+0xba>
		{
			// Start Byte has been detected without parity error
			// Proceed to take the msg
			this->_rx_pointer = 0;
     f4a:	1b 8a       	std	Y+19, r1	; 0x13
     f4c:	1a 8a       	std	Y+18, r1	; 0x12
			this->_rx_parity_error = 0x00;
     f4e:	1d 8a       	std	Y+21, r1	; 0x15
			this->_rx_status = BUSY;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	1b c0       	rjmp	.+54     	; 0xf8c <_ZN6RFData13ISR_receivingEv+0xba>
		}
		break;
	case BUSY:
		// Update the RX Buffer
		this->_rx_buff[this->_rx_pointer] = this->_dummy;
     f56:	8a 89       	ldd	r24, Y+18	; 0x12
     f58:	9b 89       	ldd	r25, Y+19	; 0x13
     f5a:	2f 89       	ldd	r18, Y+23	; 0x17
     f5c:	fe 01       	movw	r30, r28
     f5e:	e8 0f       	add	r30, r24
     f60:	f9 1f       	adc	r31, r25
     f62:	27 83       	std	Z+7, r18	; 0x07
		// Update wether there is a parity error or not
		if (this->_parity_dummy)
     f64:	2e 89       	ldd	r18, Y+22	; 0x16
     f66:	22 23       	and	r18, r18
     f68:	59 f0       	breq	.+22     	; 0xf80 <_ZN6RFData13ISR_receivingEv+0xae>
		{
			// There is parity error in this byte!
			this->_rx_parity_error = this->_rx_parity_error | (1 << _rx_pointer);
     f6a:	4d 89       	ldd	r20, Y+21	; 0x15
     f6c:	21 e0       	ldi	r18, 0x01	; 1
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	08 2e       	mov	r0, r24
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <_ZN6RFData13ISR_receivingEv+0xa6>
     f74:	22 0f       	add	r18, r18
     f76:	33 1f       	adc	r19, r19
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <_ZN6RFData13ISR_receivingEv+0xa2>
     f7c:	24 2b       	or	r18, r20
     f7e:	2d 8b       	std	Y+21, r18	; 0x15
		}
		this->_rx_pointer ++;
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	9b 8b       	std	Y+19, r25	; 0x13
     f84:	8a 8b       	std	Y+18, r24	; 0x12
		if (this->_rx_pointer >= CWSIZE)
     f86:	05 97       	sbiw	r24, 0x05	; 5
     f88:	08 f0       	brcs	.+2      	; 0xf8c <_ZN6RFData13ISR_receivingEv+0xba>
		{
			// Data ready to be taken
			this->_rx_status = READY;
     f8a:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	case READY:
		break;
	}
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <_ZN6RFData14RX_return_dataEPhS0_>:

UCHAR RFData::RX_return_data(UCHAR* joystick_data_destination, UCHAR* button_data_destination)
{
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
	if (this->_rx_status == READY)
     f9e:	fc 01       	movw	r30, r24
     fa0:	21 81       	ldd	r18, Z+1	; 0x01
     fa2:	21 11       	cpse	r18, r1
     fa4:	2c c0       	rjmp	.+88     	; 0xffe <_ZN6RFData14RX_return_dataEPhS0_+0x6c>
     fa6:	7a 01       	movw	r14, r20
     fa8:	8b 01       	movw	r16, r22
     faa:	ec 01       	movw	r28, r24
	{
		// Returning the data into MCU so that it can be used to control actuator (motor)
		// First, check wether there is a parity bit error or parity msg error
		this->_rx_checkbyte[0] = this->_rx_buff[DWSIZE];
     fac:	82 85       	ldd	r24, Z+10	; 0x0a
     fae:	86 87       	std	Z+14, r24	; 0x0e
		this->_rx_checkbyte[1] = this->_rx_buff[DWSIZE+1];
     fb0:	83 85       	ldd	r24, Z+11	; 0x0b
     fb2:	87 87       	std	Z+15, r24	; 0x0f
		this->parityGenerator(this->_rx_buff);
     fb4:	bf 01       	movw	r22, r30
     fb6:	69 5f       	subi	r22, 0xF9	; 249
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	cf 01       	movw	r24, r30
     fbc:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN6RFData15parityGeneratorEPh>
		this->_rx_checkbyte[0] = this->_rx_checkbyte[0] ^ this->_rx_buff[DWSIZE];
     fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc4:	89 27       	eor	r24, r25
     fc6:	8e 87       	std	Y+14, r24	; 0x0e
		this->_rx_checkbyte[1] = this->_rx_checkbyte[1] ^ this->_rx_buff[DWSIZE+1];
     fc8:	2f 85       	ldd	r18, Y+15	; 0x0f
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	92 27       	eor	r25, r18
     fce:	9f 87       	std	Y+15, r25	; 0x0f
		
		if ((!this->_rx_checkbyte[0]) && (!this->_rx_checkbyte[1]) && (this->_rx_parity_error == 0))
     fd0:	81 11       	cpse	r24, r1
     fd2:	11 c0       	rjmp	.+34     	; 0xff6 <_ZN6RFData14RX_return_dataEPhS0_+0x64>
     fd4:	91 11       	cpse	r25, r1
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <_ZN6RFData14RX_return_dataEPhS0_+0x64>
     fd8:	8d 89       	ldd	r24, Y+21	; 0x15
     fda:	81 11       	cpse	r24, r1
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <_ZN6RFData14RX_return_dataEPhS0_+0x64>
		{
			// There is no parity error in both of each byte and total bytes
			// Proceed to returning data into destination
			joystick_data_destination[XDATA] = (UCHAR)this->_rx_buff[XDATA];
     fde:	8f 81       	ldd	r24, Y+7	; 0x07
     fe0:	f8 01       	movw	r30, r16
     fe2:	80 83       	st	Z, r24
			joystick_data_destination[YDATA] = (UCHAR)this->_rx_buff[YDATA];
     fe4:	88 85       	ldd	r24, Y+8	; 0x08
     fe6:	81 83       	std	Z+1, r24	; 0x01
			*button_data_destination = (UCHAR)this->_rx_buff[BUTTONDATA];
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	f7 01       	movw	r30, r14
     fec:	80 83       	st	Z, r24
			
			this->_rx_status = EMPTY;	// Proceed to receive next data train
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	89 83       	std	Y+1, r24	; 0x01
			return 1;					// Return 1 to indicate that we have successfully return data
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <_ZN6RFData14RX_return_dataEPhS0_+0x6e>
		} else {
			// There is an, indeed, error. Just ignore the data and proceed to receive next data train
			this->_rx_status = EMPTY;
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	89 83       	std	Y+1, r24	; 0x01
			return 0x80;
     ffa:	80 e8       	ldi	r24, 0x80	; 128
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <_ZN6RFData14RX_return_dataEPhS0_+0x6e>
		}
	}
	else
	{
		// If the data is not ready, just wait the next chance after the buffer is ready
		return 0;
     ffe:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	08 95       	ret

0000100e <__udivmodsi4>:
    100e:	a1 e2       	ldi	r26, 0x21	; 33
    1010:	1a 2e       	mov	r1, r26
    1012:	aa 1b       	sub	r26, r26
    1014:	bb 1b       	sub	r27, r27
    1016:	fd 01       	movw	r30, r26
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <__udivmodsi4_ep>

0000101a <__udivmodsi4_loop>:
    101a:	aa 1f       	adc	r26, r26
    101c:	bb 1f       	adc	r27, r27
    101e:	ee 1f       	adc	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	a2 17       	cp	r26, r18
    1024:	b3 07       	cpc	r27, r19
    1026:	e4 07       	cpc	r30, r20
    1028:	f5 07       	cpc	r31, r21
    102a:	20 f0       	brcs	.+8      	; 0x1034 <__udivmodsi4_ep>
    102c:	a2 1b       	sub	r26, r18
    102e:	b3 0b       	sbc	r27, r19
    1030:	e4 0b       	sbc	r30, r20
    1032:	f5 0b       	sbc	r31, r21

00001034 <__udivmodsi4_ep>:
    1034:	66 1f       	adc	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	1a 94       	dec	r1
    103e:	69 f7       	brne	.-38     	; 0x101a <__udivmodsi4_loop>
    1040:	60 95       	com	r22
    1042:	70 95       	com	r23
    1044:	80 95       	com	r24
    1046:	90 95       	com	r25
    1048:	9b 01       	movw	r18, r22
    104a:	ac 01       	movw	r20, r24
    104c:	bd 01       	movw	r22, r26
    104e:	cf 01       	movw	r24, r30
    1050:	08 95       	ret

00001052 <__tablejump2__>:
    1052:	ee 0f       	add	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	05 90       	lpm	r0, Z+
    1058:	f4 91       	lpm	r31, Z
    105a:	e0 2d       	mov	r30, r0
    105c:	09 94       	ijmp

0000105e <_exit>:
    105e:	f8 94       	cli

00001060 <__stop_program>:
    1060:	ff cf       	rjmp	.-2      	; 0x1060 <__stop_program>
